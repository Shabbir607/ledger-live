import {
  require_debounce
} from "./chunk-D6TCBDVO.js";
import {
  __commonJS,
  __publicField,
  __require,
  __toESM
} from "./chunk-2TUXWMP5.js";

// browser-external:os
var require_os = __commonJS({
  "browser-external:os"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "os" has been externalized for browser compatibility. Cannot access "os.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/.pnpm/events@3.3.0/node_modules/events/events.js
var require_events = __commonJS({
  "node_modules/.pnpm/events@3.3.0/node_modules/events/events.js"(exports, module) {
    "use strict";
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter3() {
      EventEmitter3.init.call(this);
    }
    module.exports = EventEmitter3;
    module.exports.once = once;
    EventEmitter3.EventEmitter = EventEmitter3;
    EventEmitter3.prototype._events = void 0;
    EventEmitter3.prototype._eventsCount = 0;
    EventEmitter3.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter3, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter3.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter3.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter3.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter3.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter3.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter3.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter3.prototype.on = EventEmitter3.prototype.addListener;
    EventEmitter3.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter3.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter3.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter3.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter3.prototype.off = EventEmitter3.prototype.removeListener;
    EventEmitter3.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener") continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter3.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter3.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter3.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter3.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter3.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    function spliceOne(list, index) {
      for (; index + 1 < list.length; index++)
        list[index] = list[index + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// browser-external:util
var require_util = __commonJS({
  "browser-external:util"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "util" has been externalized for browser compatibility. Cannot access "util.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:fs
var require_fs = __commonJS({
  "browser-external:fs"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "fs" has been externalized for browser compatibility. Cannot access "fs.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// browser-external:path
var require_path = __commonJS({
  "browser-external:path"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "path" has been externalized for browser compatibility. Cannot access "path.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/.pnpm/file-uri-to-path@1.0.0/node_modules/file-uri-to-path/index.js
var require_file_uri_to_path = __commonJS({
  "node_modules/.pnpm/file-uri-to-path@1.0.0/node_modules/file-uri-to-path/index.js"(exports, module) {
    var sep = require_path().sep || "/";
    module.exports = fileUriToPath;
    function fileUriToPath(uri) {
      if ("string" != typeof uri || uri.length <= 7 || "file://" != uri.substring(0, 7)) {
        throw new TypeError("must pass in a file:// URI to convert to a file path");
      }
      var rest = decodeURI(uri.substring(7));
      var firstSlash = rest.indexOf("/");
      var host = rest.substring(0, firstSlash);
      var path = rest.substring(firstSlash + 1);
      if ("localhost" == host) host = "";
      if (host) {
        host = sep + sep + host;
      }
      path = path.replace(/^(.+)\|/, "$1:");
      if (sep == "\\") {
        path = path.replace(/\//g, "\\");
      }
      if (/^.+\:/.test(path)) {
      } else {
        path = sep + path;
      }
      return host + path;
    }
  }
});

// node_modules/.pnpm/bindings@1.5.0/node_modules/bindings/bindings.js
var require_bindings = __commonJS({
  "node_modules/.pnpm/bindings@1.5.0/node_modules/bindings/bindings.js"(exports, module) {
    var fs = require_fs();
    var path = require_path();
    var fileURLToPath = require_file_uri_to_path();
    var join = path.join;
    var dirname = path.dirname;
    var exists = fs.accessSync && function(path2) {
      try {
        fs.accessSync(path2);
      } catch (e) {
        return false;
      }
      return true;
    } || fs.existsSync || path.existsSync;
    var defaults = {
      arrow: process.env.NODE_BINDINGS_ARROW || " → ",
      compiled: process.env.NODE_BINDINGS_COMPILED_DIR || "compiled",
      platform: process.platform,
      arch: process.arch,
      nodePreGyp: "node-v" + process.versions.modules + "-" + process.platform + "-" + process.arch,
      version: process.versions.node,
      bindings: "bindings.node",
      try: [
        // node-gyp's linked version in the "build" dir
        ["module_root", "build", "bindings"],
        // node-waf and gyp_addon (a.k.a node-gyp)
        ["module_root", "build", "Debug", "bindings"],
        ["module_root", "build", "Release", "bindings"],
        // Debug files, for development (legacy behavior, remove for node v0.9)
        ["module_root", "out", "Debug", "bindings"],
        ["module_root", "Debug", "bindings"],
        // Release files, but manually compiled (legacy behavior, remove for node v0.9)
        ["module_root", "out", "Release", "bindings"],
        ["module_root", "Release", "bindings"],
        // Legacy from node-waf, node <= 0.4.x
        ["module_root", "build", "default", "bindings"],
        // Production "Release" buildtype binary (meh...)
        ["module_root", "compiled", "version", "platform", "arch", "bindings"],
        // node-qbs builds
        ["module_root", "addon-build", "release", "install-root", "bindings"],
        ["module_root", "addon-build", "debug", "install-root", "bindings"],
        ["module_root", "addon-build", "default", "install-root", "bindings"],
        // node-pre-gyp path ./lib/binding/{node_abi}-{platform}-{arch}
        ["module_root", "lib", "binding", "nodePreGyp", "bindings"]
      ]
    };
    function bindings(opts) {
      if (typeof opts == "string") {
        opts = { bindings: opts };
      } else if (!opts) {
        opts = {};
      }
      Object.keys(defaults).map(function(i2) {
        if (!(i2 in opts)) opts[i2] = defaults[i2];
      });
      if (!opts.module_root) {
        opts.module_root = exports.getRoot(exports.getFileName());
      }
      if (path.extname(opts.bindings) != ".node") {
        opts.bindings += ".node";
      }
      var requireFunc = typeof __webpack_require__ === "function" ? __non_webpack_require__ : __require;
      var tries = [], i = 0, l = opts.try.length, n, b, err;
      for (; i < l; i++) {
        n = join.apply(
          null,
          opts.try[i].map(function(p) {
            return opts[p] || p;
          })
        );
        tries.push(n);
        try {
          b = opts.path ? requireFunc.resolve(n) : requireFunc(n);
          if (!opts.path) {
            b.path = n;
          }
          return b;
        } catch (e) {
          if (e.code !== "MODULE_NOT_FOUND" && e.code !== "QUALIFIED_PATH_RESOLUTION_FAILED" && !/not find/i.test(e.message)) {
            throw e;
          }
        }
      }
      err = new Error(
        "Could not locate the bindings file. Tried:\n" + tries.map(function(a) {
          return opts.arrow + a;
        }).join("\n")
      );
      err.tries = tries;
      throw err;
    }
    module.exports = exports = bindings;
    exports.getFileName = function getFileName(calling_file) {
      var origPST = Error.prepareStackTrace, origSTL = Error.stackTraceLimit, dummy = {}, fileName;
      Error.stackTraceLimit = 10;
      Error.prepareStackTrace = function(e, st) {
        for (var i = 0, l = st.length; i < l; i++) {
          fileName = st[i].getFileName();
          if (fileName !== __filename) {
            if (calling_file) {
              if (fileName !== calling_file) {
                return;
              }
            } else {
              return;
            }
          }
        }
      };
      Error.captureStackTrace(dummy);
      dummy.stack;
      Error.prepareStackTrace = origPST;
      Error.stackTraceLimit = origSTL;
      var fileSchema = "file://";
      if (fileName.indexOf(fileSchema) === 0) {
        fileName = fileURLToPath(fileName);
      }
      return fileName;
    };
    exports.getRoot = function getRoot(file) {
      var dir = dirname(file), prev;
      while (true) {
        if (dir === ".") {
          dir = process.cwd();
        }
        if (exists(join(dir, "package.json")) || exists(join(dir, "node_modules"))) {
          return dir;
        }
        if (prev === dir) {
          throw new Error(
            'Could not find module root given file: "' + file + '". Do you have a `package.json` file? '
          );
        }
        prev = dir;
        dir = join(dir, "..");
      }
    };
  }
});

// node_modules/.pnpm/node-hid@2.1.2/node_modules/node-hid/nodehid.js
var require_nodehid = __commonJS({
  "node_modules/.pnpm/node-hid@2.1.2/node_modules/node-hid/nodehid.js"(exports) {
    var os = require_os();
    var EventEmitter3 = require_events().EventEmitter;
    var util = require_util();
    var driverType = null;
    function setDriverType(type) {
      driverType = type;
    }
    var binding = null;
    function loadBinding() {
      if (!binding) {
        if (os.platform() === "linux") {
          if (!driverType || driverType === "hidraw") {
            binding = require_bindings()("HID_hidraw.node");
          } else {
            binding = require_bindings()("HID.node");
          }
        } else {
          binding = require_bindings()("HID.node");
        }
      }
    }
    function HID3() {
      EventEmitter3.call(this);
      loadBinding();
      var thisPlusArgs = new Array(arguments.length + 1);
      thisPlusArgs[0] = null;
      for (var i = 0; i < arguments.length; i++)
        thisPlusArgs[i + 1] = arguments[i];
      this._raw = new (Function.prototype.bind.apply(
        binding.HID,
        thisPlusArgs
      ))();
      for (var i in binding.HID.prototype)
        this[i] = binding.HID.prototype[i].bind(this._raw);
      this._paused = true;
      var self = this;
      self.on("newListener", function(eventName, listener) {
        if (eventName == "data")
          process.nextTick(self.resume.bind(self));
      });
    }
    util.inherits(HID3, EventEmitter3);
    HID3.prototype.close = function close() {
      this._closing = true;
      this.removeAllListeners();
      this._raw.close();
      this._closed = true;
    };
    HID3.prototype.pause = function pause() {
      this._paused = true;
    };
    HID3.prototype.read = function read(callback) {
      if (this._closed) {
        throw new Error("Unable to read from a closed HID device");
      } else {
        return this._raw.read(callback);
      }
    };
    HID3.prototype.resume = function resume() {
      var self = this;
      if (self._paused && self.listeners("data").length > 0) {
        self._paused = false;
        self.read(function readFunc(err, data) {
          if (err) {
            self._paused = true;
            if (!self._closing)
              self.emit("error", err);
          } else {
            if (self.listeners("data").length <= 0)
              self._paused = true;
            if (!self._paused)
              self.read(readFunc);
            self.emit("data", data);
          }
        });
      }
    };
    function showdevices() {
      loadBinding();
      return binding.devices.apply(HID3, arguments);
    }
    exports.HID = HID3;
    exports.devices = showdevices;
    exports.setDriverType = setDriverType;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/constants.js
var require_constants = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/constants.js"(exports, module) {
    "use strict";
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/debug.js"(exports, module) {
    "use strict";
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module.exports = debug;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/re.js
var require_re = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/re.js"(exports, module) {
    "use strict";
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants();
    var debug = require_debug();
    exports = module.exports = {};
    var re = exports.re = [];
    var safeRe = exports.safeRe = [];
    var src = exports.src = [];
    var safeSrc = exports.safeSrc = [];
    var t = exports.t = {};
    var R = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = (value) => {
      for (const [token, max] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
      }
      return value;
    };
    var createToken = (name, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R++;
      debug(name, index, value);
      t[name] = index;
      src[index] = value;
      safeSrc[index] = safe;
      re[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NONNUMERICIDENTIFIER]}|${src[t.NUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NONNUMERICIDENTIFIER]}|${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
    createToken("COERCE", `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src[t.COERCEPLAIN] + `(?:${src[t.PRERELEASE]})?(?:${src[t.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    createToken("COERCERTLFULL", src[t.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/parse-options.js"(exports, module) {
    "use strict";
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options) => {
      if (!options) {
        return emptyOpts;
      }
      if (typeof options !== "object") {
        return looseOption;
      }
      return options;
    };
    module.exports = parseOptions;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/identifiers.js"(exports, module) {
    "use strict";
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/classes/semver.js"(exports, module) {
    "use strict";
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants();
    var { safeRe: re, t } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class _SemVer {
      constructor(version, options) {
        options = parseOptions(options);
        if (version instanceof _SemVer) {
          if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) {
            return version;
          } else {
            version = version.version;
          }
        } else if (typeof version !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
        }
        if (version.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug("SemVer", version, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version}`);
        }
        this.raw = version;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split(".").map((id2) => {
            if (/^[0-9]+$/.test(id2)) {
              const num = +id2;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id2;
          });
        }
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof _SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new _SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug("build compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release, identifier, identifierBase) {
        if (release.startsWith("pre")) {
          if (!identifier && identifierBase === false) {
            throw new Error("invalid increment argument: identifier is empty");
          }
          if (identifier) {
            const match = `-${identifier}`.match(this.options.loose ? re[t.PRERELEASELOOSE] : re[t.PRERELEASE]);
            if (!match || match[1] !== identifier) {
              throw new Error(`invalid identifier: ${identifier}`);
            }
          }
        }
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          // If the input is a non-prerelease version, this acts the same as
          // prepatch.
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "release":
            if (this.prerelease.length === 0) {
              throw new Error(`version ${this.raw} is not a prerelease`);
            }
            this.prerelease.length = 0;
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          // This probably shouldn't be used publicly.
          // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module.exports = SemVer;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/parse.js
var require_parse = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/parse.js"(exports, module) {
    "use strict";
    var SemVer = require_semver();
    var parse = (version, options, throwErrors = false) => {
      if (version instanceof SemVer) {
        return version;
      }
      try {
        return new SemVer(version, options);
      } catch (er) {
        if (!throwErrors) {
          return null;
        }
        throw er;
      }
    };
    module.exports = parse;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/valid.js"(exports, module) {
    "use strict";
    var parse = require_parse();
    var valid = (version, options) => {
      const v = parse(version, options);
      return v ? v.version : null;
    };
    module.exports = valid;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/clean.js"(exports, module) {
    "use strict";
    var parse = require_parse();
    var clean = (version, options) => {
      const s = parse(version.trim().replace(/^[=v]+/, ""), options);
      return s ? s.version : null;
    };
    module.exports = clean;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/inc.js"(exports, module) {
    "use strict";
    var SemVer = require_semver();
    var inc = (version, release, options, identifier, identifierBase) => {
      if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = void 0;
      }
      try {
        return new SemVer(
          version instanceof SemVer ? version.version : version,
          options
        ).inc(release, identifier, identifierBase).version;
      } catch (er) {
        return null;
      }
    };
    module.exports = inc;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/diff.js"(exports, module) {
    "use strict";
    var parse = require_parse();
    var diff = (version1, version2) => {
      const v1 = parse(version1, null, true);
      const v2 = parse(version2, null, true);
      const comparison = v1.compare(v2);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v1 : v2;
      const lowVersion = v1Higher ? v2 : v1;
      const highHasPre = !!highVersion.prerelease.length;
      const lowHasPre = !!lowVersion.prerelease.length;
      if (lowHasPre && !highHasPre) {
        if (!lowVersion.patch && !lowVersion.minor) {
          return "major";
        }
        if (lowVersion.compareMain(highVersion) === 0) {
          if (lowVersion.minor && !lowVersion.patch) {
            return "minor";
          }
          return "patch";
        }
      }
      const prefix = highHasPre ? "pre" : "";
      if (v1.major !== v2.major) {
        return prefix + "major";
      }
      if (v1.minor !== v2.minor) {
        return prefix + "minor";
      }
      if (v1.patch !== v2.patch) {
        return prefix + "patch";
      }
      return "prerelease";
    };
    module.exports = diff;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/major.js
var require_major = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/major.js"(exports, module) {
    "use strict";
    var SemVer = require_semver();
    var major = (a, loose) => new SemVer(a, loose).major;
    module.exports = major;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/minor.js"(exports, module) {
    "use strict";
    var SemVer = require_semver();
    var minor = (a, loose) => new SemVer(a, loose).minor;
    module.exports = minor;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/patch.js"(exports, module) {
    "use strict";
    var SemVer = require_semver();
    var patch = (a, loose) => new SemVer(a, loose).patch;
    module.exports = patch;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/prerelease.js"(exports, module) {
    "use strict";
    var parse = require_parse();
    var prerelease = (version, options) => {
      const parsed = parse(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module.exports = prerelease;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/compare.js"(exports, module) {
    "use strict";
    var SemVer = require_semver();
    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module.exports = compare;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/rcompare.js"(exports, module) {
    "use strict";
    var compare = require_compare();
    var rcompare = (a, b, loose) => compare(b, a, loose);
    module.exports = rcompare;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/compare-loose.js"(exports, module) {
    "use strict";
    var compare = require_compare();
    var compareLoose = (a, b) => compare(a, b, true);
    module.exports = compareLoose;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/compare-build.js"(exports, module) {
    "use strict";
    var SemVer = require_semver();
    var compareBuild = (a, b, loose) => {
      const versionA = new SemVer(a, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module.exports = compareBuild;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/sort.js"(exports, module) {
    "use strict";
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
    module.exports = sort;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/rsort.js"(exports, module) {
    "use strict";
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    module.exports = rsort;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/gt.js"(exports, module) {
    "use strict";
    var compare = require_compare();
    var gt = (a, b, loose) => compare(a, b, loose) > 0;
    module.exports = gt;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/lt.js"(exports, module) {
    "use strict";
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module.exports = lt;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/eq.js"(exports, module) {
    "use strict";
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module.exports = eq;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/neq.js"(exports, module) {
    "use strict";
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module.exports = neq;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/gte.js"(exports, module) {
    "use strict";
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module.exports = gte;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/lte.js"(exports, module) {
    "use strict";
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module.exports = lte;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/cmp.js"(exports, module) {
    "use strict";
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a === b;
        case "!==":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module.exports = cmp;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/coerce.js"(exports, module) {
    "use strict";
    var SemVer = require_semver();
    var parse = require_parse();
    var { safeRe: re, t } = require_re();
    var coerce = (version, options) => {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version === "number") {
        version = String(version);
      }
      if (typeof version !== "string") {
        return null;
      }
      options = options || {};
      let match = null;
      if (!options.rtl) {
        match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
      } else {
        const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
        let next;
        while ((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        }
        coerceRtlRegex.lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      const major = match[2];
      const minor = match[3] || "0";
      const patch = match[4] || "0";
      const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
      const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
      return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options);
    };
    module.exports = coerce;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/lrucache.js
var require_lrucache = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/internal/lrucache.js"(exports, module) {
    "use strict";
    var LRUCache = class {
      constructor() {
        this.max = 1e3;
        this.map = /* @__PURE__ */ new Map();
      }
      get(key) {
        const value = this.map.get(key);
        if (value === void 0) {
          return void 0;
        } else {
          this.map.delete(key);
          this.map.set(key, value);
          return value;
        }
      }
      delete(key) {
        return this.map.delete(key);
      }
      set(key, value) {
        const deleted = this.delete(key);
        if (!deleted && value !== void 0) {
          if (this.map.size >= this.max) {
            const firstKey = this.map.keys().next().value;
            this.delete(firstKey);
          }
          this.map.set(key, value);
        }
        return this;
      }
    };
    module.exports = LRUCache;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/classes/range.js
var require_range = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/classes/range.js"(exports, module) {
    "use strict";
    var SPACE_CHARACTERS = /\s+/g;
    var Range = class _Range {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof _Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new _Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.formatted = void 0;
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i = 0; i < this.set.length; i++) {
            if (i > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i];
            for (let k = 0; k < comps.length; k++) {
              if (k > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof _Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version) {
        if (!version) {
          return false;
        }
        if (typeof version === "string") {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module.exports = Range;
    var LRU = require_lrucache();
    var cache = new LRU();
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      safeRe: re,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id2) => !id2 || id2.toLowerCase() === "x" || id2 === "*";
    var replaceTildes = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
    };
    var replaceTilde = (comp, options) => {
      const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
    };
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version, options) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === Comparator.ANY) {
            continue;
          }
          if (set[i].semver.prerelease.length > 0) {
            const allowed = set[i].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/classes/comparator.js"(exports, module) {
    "use strict";
    var ANY = Symbol("SemVer ANY");
    var Comparator = class _Comparator {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof _Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version) {
        debug("Comparator.test", version, this.options.loose);
        if (this.semver === ANY || version === ANY) {
          return true;
        }
        if (typeof version === "string") {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof _Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        options = parseOptions(options);
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re, t } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range = require_range();
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/functions/satisfies.js"(exports, module) {
    "use strict";
    var Range = require_range();
    var satisfies = (version, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version);
    };
    module.exports = satisfies;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/to-comparators.js"(exports, module) {
    "use strict";
    var Range = require_range();
    var toComparators = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
    module.exports = toComparators;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/max-satisfying.js"(exports, module) {
    "use strict";
    var SemVer = require_semver();
    var Range = require_range();
    var maxSatisfying = (versions, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    };
    module.exports = maxSatisfying;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/min-satisfying.js"(exports, module) {
    "use strict";
    var SemVer = require_semver();
    var Range = require_range();
    var minSatisfying = (versions, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    };
    module.exports = minSatisfying;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/min-version.js"(exports, module) {
    "use strict";
    var SemVer = require_semver();
    var Range = require_range();
    var gt = require_gt();
    var minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            /* fallthrough */
            case "":
            case ">=":
              if (!setMin || gt(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            /* istanbul ignore next */
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module.exports = minVersion;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/valid.js"(exports, module) {
    "use strict";
    var Range = require_range();
    var validRange = (range, options) => {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    };
    module.exports = validRange;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/outside.js"(exports, module) {
    "use strict";
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range();
    var satisfies = require_satisfies();
    var gt = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version, range, hilo, options) => {
      version = new SemVer(version, options);
      range = new Range(range, options);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options)) {
        return false;
      }
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module.exports = outside;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/gtr.js"(exports, module) {
    "use strict";
    var outside = require_outside();
    var gtr = (version, range, options) => outside(version, range, ">", options);
    module.exports = gtr;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/ltr.js"(exports, module) {
    "use strict";
    var outside = require_outside();
    var ltr = (version, range, options) => outside(version, range, "<", options);
    module.exports = ltr;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/intersects.js"(exports, module) {
    "use strict";
    var Range = require_range();
    var intersects = (r1, r2, options) => {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2, options);
    };
    module.exports = intersects;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/simplify.js"(exports, module) {
    "use strict";
    var satisfies = require_satisfies();
    var compare = require_compare();
    module.exports = (versions, range, options) => {
      const set = [];
      let first = null;
      let prev = null;
      const v = versions.sort((a, b) => compare(a, b, options));
      for (const version of v) {
        const included = satisfies(version, range, options);
        if (included) {
          prev = version;
          if (!first) {
            first = version;
          }
        } else {
          if (prev) {
            set.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set.push([first, null]);
      }
      const ranges = [];
      for (const [min, max] of set) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v[0]) {
          ranges.push("*");
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/ranges/subset.js"(exports, module) {
    "use strict";
    var Range = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;
      OUTER: for (const simpleSub of sub.set) {
        for (const simpleDom of dom.set) {
          const isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub) {
            continue OUTER;
          }
        }
        if (sawNonNull) {
          return false;
        }
      }
      return true;
    };
    var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
    var minimumVersion = [new Comparator(">=0.0.0")];
    var simpleSubset = (sub, dom, options) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt, lt;
      for (const c of sub) {
        if (c.operator === ">" || c.operator === ">=") {
          gt = higherGT(gt, c, options);
        } else if (c.operator === "<" || c.operator === "<=") {
          lt = lowerLT(lt, c, options);
        } else {
          eqSet.add(c.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) {
          return null;
        }
      }
      for (const eq of eqSet) {
        if (gt && !satisfies(eq, String(gt), options)) {
          return null;
        }
        if (lt && !satisfies(eq, String(lt), options)) {
          return null;
        }
        for (const c of dom) {
          if (!satisfies(eq, String(c), options)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === ">" || c.operator === ">=") {
            higher = higherGT(gt, c, options);
            if (higher === c && higher !== gt) {
              return false;
            }
          } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options)) {
            return false;
          }
        }
        if (lt) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === "<" || c.operator === "<=") {
            lower = lowerLT(lt, c, options);
            if (lower === c && lower !== lt) {
              return false;
            }
          } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options)) {
            return false;
          }
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt && hasDomLT && !lt && gtltComp !== 0) {
        return false;
      }
      if (lt && hasDomGT && !gt && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
    };
    var lowerLT = (a, b, options) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options);
      return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
    };
    module.exports = subset;
  }
});

// node_modules/.pnpm/semver@7.7.2/node_modules/semver/index.js
var require_semver2 = __commonJS({
  "node_modules/.pnpm/semver@7.7.2/node_modules/semver/index.js"(exports, module) {
    "use strict";
    var internalRe = require_re();
    var constants = require_constants();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse = require_parse();
    var valid = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt = require_gt();
    var lt = require_lt();
    var eq = require_eq();
    var neq = require_neq();
    var gte = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce = require_coerce();
    var Comparator = require_comparator();
    var Range = require_range();
    var satisfies = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module.exports = {
      parse,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt,
      lt,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce,
      Comparator,
      Range,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// node_modules/.pnpm/node-gyp-build@4.8.4/node_modules/node-gyp-build/node-gyp-build.js
var require_node_gyp_build = __commonJS({
  "node_modules/.pnpm/node-gyp-build@4.8.4/node_modules/node-gyp-build/node-gyp-build.js"(exports, module) {
    var fs = require_fs();
    var path = require_path();
    var os = require_os();
    var runtimeRequire = typeof __webpack_require__ === "function" ? __non_webpack_require__ : __require;
    var vars = process.config && process.config.variables || {};
    var prebuildsOnly = !!process.env.PREBUILDS_ONLY;
    var abi = process.versions.modules;
    var runtime = isElectron() ? "electron" : isNwjs() ? "node-webkit" : "node";
    var arch = process.env.npm_config_arch || os.arch();
    var platform = process.env.npm_config_platform || os.platform();
    var libc = process.env.LIBC || (isAlpine(platform) ? "musl" : "glibc");
    var armv = process.env.ARM_VERSION || (arch === "arm64" ? "8" : vars.arm_version) || "";
    var uv = (process.versions.uv || "").split(".")[0];
    module.exports = load;
    function load(dir) {
      return runtimeRequire(load.resolve(dir));
    }
    load.resolve = load.path = function(dir) {
      dir = path.resolve(dir || ".");
      try {
        var name = runtimeRequire(path.join(dir, "package.json")).name.toUpperCase().replace(/-/g, "_");
        if (process.env[name + "_PREBUILD"]) dir = process.env[name + "_PREBUILD"];
      } catch (err) {
      }
      if (!prebuildsOnly) {
        var release = getFirst(path.join(dir, "build/Release"), matchBuild);
        if (release) return release;
        var debug = getFirst(path.join(dir, "build/Debug"), matchBuild);
        if (debug) return debug;
      }
      var prebuild = resolve(dir);
      if (prebuild) return prebuild;
      var nearby = resolve(path.dirname(process.execPath));
      if (nearby) return nearby;
      var target = [
        "platform=" + platform,
        "arch=" + arch,
        "runtime=" + runtime,
        "abi=" + abi,
        "uv=" + uv,
        armv ? "armv=" + armv : "",
        "libc=" + libc,
        "node=" + process.versions.node,
        process.versions.electron ? "electron=" + process.versions.electron : "",
        typeof __webpack_require__ === "function" ? "webpack=true" : ""
        // eslint-disable-line
      ].filter(Boolean).join(" ");
      throw new Error("No native build was found for " + target + "\n    loaded from: " + dir + "\n");
      function resolve(dir2) {
        var tuples = readdirSync(path.join(dir2, "prebuilds")).map(parseTuple);
        var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0];
        if (!tuple) return;
        var prebuilds = path.join(dir2, "prebuilds", tuple.name);
        var parsed = readdirSync(prebuilds).map(parseTags);
        var candidates = parsed.filter(matchTags(runtime, abi));
        var winner = candidates.sort(compareTags(runtime))[0];
        if (winner) return path.join(prebuilds, winner.file);
      }
    };
    function readdirSync(dir) {
      try {
        return fs.readdirSync(dir);
      } catch (err) {
        return [];
      }
    }
    function getFirst(dir, filter) {
      var files = readdirSync(dir).filter(filter);
      return files[0] && path.join(dir, files[0]);
    }
    function matchBuild(name) {
      return /\.node$/.test(name);
    }
    function parseTuple(name) {
      var arr = name.split("-");
      if (arr.length !== 2) return;
      var platform2 = arr[0];
      var architectures = arr[1].split("+");
      if (!platform2) return;
      if (!architectures.length) return;
      if (!architectures.every(Boolean)) return;
      return { name, platform: platform2, architectures };
    }
    function matchTuple(platform2, arch2) {
      return function(tuple) {
        if (tuple == null) return false;
        if (tuple.platform !== platform2) return false;
        return tuple.architectures.includes(arch2);
      };
    }
    function compareTuples(a, b) {
      return a.architectures.length - b.architectures.length;
    }
    function parseTags(file) {
      var arr = file.split(".");
      var extension = arr.pop();
      var tags = { file, specificity: 0 };
      if (extension !== "node") return;
      for (var i = 0; i < arr.length; i++) {
        var tag = arr[i];
        if (tag === "node" || tag === "electron" || tag === "node-webkit") {
          tags.runtime = tag;
        } else if (tag === "napi") {
          tags.napi = true;
        } else if (tag.slice(0, 3) === "abi") {
          tags.abi = tag.slice(3);
        } else if (tag.slice(0, 2) === "uv") {
          tags.uv = tag.slice(2);
        } else if (tag.slice(0, 4) === "armv") {
          tags.armv = tag.slice(4);
        } else if (tag === "glibc" || tag === "musl") {
          tags.libc = tag;
        } else {
          continue;
        }
        tags.specificity++;
      }
      return tags;
    }
    function matchTags(runtime2, abi2) {
      return function(tags) {
        if (tags == null) return false;
        if (tags.runtime && tags.runtime !== runtime2 && !runtimeAgnostic(tags)) return false;
        if (tags.abi && tags.abi !== abi2 && !tags.napi) return false;
        if (tags.uv && tags.uv !== uv) return false;
        if (tags.armv && tags.armv !== armv) return false;
        if (tags.libc && tags.libc !== libc) return false;
        return true;
      };
    }
    function runtimeAgnostic(tags) {
      return tags.runtime === "node" && tags.napi;
    }
    function compareTags(runtime2) {
      return function(a, b) {
        if (a.runtime !== b.runtime) {
          return a.runtime === runtime2 ? -1 : 1;
        } else if (a.abi !== b.abi) {
          return a.abi ? -1 : 1;
        } else if (a.specificity !== b.specificity) {
          return a.specificity > b.specificity ? -1 : 1;
        } else {
          return 0;
        }
      };
    }
    function isNwjs() {
      return !!(process.versions && process.versions.nw);
    }
    function isElectron() {
      if (process.versions && process.versions.electron) return true;
      if (process.env.ELECTRON_RUN_AS_NODE) return true;
      return typeof window !== "undefined" && window.process && window.process.type === "renderer";
    }
    function isAlpine(platform2) {
      return platform2 === "linux" && fs.existsSync("/etc/alpine-release");
    }
    load.parseTags = parseTags;
    load.matchTags = matchTags;
    load.compareTags = compareTags;
    load.parseTuple = parseTuple;
    load.matchTuple = matchTuple;
    load.compareTuples = compareTuples;
  }
});

// node_modules/.pnpm/node-gyp-build@4.8.4/node_modules/node-gyp-build/index.js
var require_node_gyp_build2 = __commonJS({
  "node_modules/.pnpm/node-gyp-build@4.8.4/node_modules/node-gyp-build/index.js"(exports, module) {
    var runtimeRequire = typeof __webpack_require__ === "function" ? __non_webpack_require__ : __require;
    if (typeof runtimeRequire.addon === "function") {
      module.exports = runtimeRequire.addon.bind(runtimeRequire);
    } else {
      module.exports = require_node_gyp_build();
    }
  }
});

// node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/bindings.js
var require_bindings2 = __commonJS({
  "node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/bindings.js"(exports, module) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var path_1 = require_path();
    var usb2 = require_node_gyp_build2()(path_1.join(__dirname, "..", ".."));
    module.exports = usb2;
  }
});

// node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/endpoint.js
var require_endpoint = __commonJS({
  "node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/endpoint.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OutEndpoint = exports.InEndpoint = exports.Endpoint = void 0;
    var events_1 = require_events();
    var bindings_1 = require_bindings2();
    var isBuffer = function(obj) {
      return obj && obj instanceof Uint8Array;
    };
    var Endpoint = (
      /** @class */
      function(_super) {
        __extends(Endpoint2, _super);
        function Endpoint2(device, descriptor) {
          var _this = _super.call(this) || this;
          _this.device = device;
          _this.timeout = 0;
          _this.descriptor = descriptor;
          _this.address = descriptor.bEndpointAddress;
          _this.transferType = descriptor.bmAttributes & 3;
          return _this;
        }
        Endpoint2.prototype.clearHalt = function(callback) {
          return this.device.__clearHalt(this.address, callback);
        };
        Endpoint2.prototype.makeTransfer = function(timeout, callback) {
          return new bindings_1.Transfer(this.device, this.address, this.transferType, timeout, callback);
        };
        return Endpoint2;
      }(events_1.EventEmitter)
    );
    exports.Endpoint = Endpoint;
    var InEndpoint = (
      /** @class */
      function(_super) {
        __extends(InEndpoint2, _super);
        function InEndpoint2(device, descriptor) {
          var _this = _super.call(this, device, descriptor) || this;
          _this.direction = "in";
          _this.pollTransfers = [];
          _this.pollTransferSize = 0;
          _this.pollPending = 0;
          _this.pollActive = false;
          return _this;
        }
        InEndpoint2.prototype.transfer = function(length, callback) {
          var _this = this;
          var buffer = Buffer.alloc(length);
          var cb = function(error, _buffer, actualLength) {
            callback.call(_this, error, buffer.slice(0, actualLength));
          };
          try {
            this.makeTransfer(this.timeout, cb).submit(buffer);
          } catch (e) {
            process.nextTick(function() {
              return callback.call(_this, e);
            });
          }
          return this;
        };
        InEndpoint2.prototype.startPoll = function(nTransfers, transferSize, _callback) {
          var _this = this;
          var transferDone = function(error, transfer, buffer, actualLength) {
            if (!error) {
              _this.emit("data", buffer.slice(0, actualLength));
            } else if (error.errno != bindings_1.LIBUSB_TRANSFER_CANCELLED) {
              _this.emit("error", error);
              if (_this.pollActive) {
                _this.stopPoll();
              }
            }
            if (_this.pollActive) {
              startTransfer(transfer);
            } else {
              _this.pollPending--;
              if (_this.pollPending === 0) {
                _this.pollTransfers = [];
                _this.pollActive = false;
                _this.emit("end");
              }
            }
          };
          var startTransfer = function(transfer) {
            try {
              transfer.submit(Buffer.alloc(_this.pollTransferSize), function(error, buffer, actualLength) {
                transferDone(error, transfer, buffer, actualLength);
              });
            } catch (e) {
              _this.emit("error", e);
              _this.stopPoll();
            }
          };
          this.pollTransfers = this.startPollTransfers(nTransfers, transferSize, function(error, buffer, actualLength) {
            transferDone(error, this, buffer, actualLength);
          });
          this.pollTransfers.forEach(startTransfer);
          this.pollPending = this.pollTransfers.length;
          return this.pollTransfers;
        };
        InEndpoint2.prototype.startPollTransfers = function(nTransfers, transferSize, callback) {
          if (nTransfers === void 0) {
            nTransfers = 3;
          }
          if (transferSize === void 0) {
            transferSize = this.descriptor.wMaxPacketSize;
          }
          if (this.pollActive) {
            throw new Error("Polling already active");
          }
          this.pollTransferSize = transferSize;
          this.pollActive = true;
          this.pollPending = 0;
          var transfers = [];
          for (var i = 0; i < nTransfers; i++) {
            var transfer = this.makeTransfer(0, callback);
            transfers[i] = transfer;
          }
          return transfers;
        };
        InEndpoint2.prototype.stopPoll = function(callback) {
          if (!this.pollActive) {
            throw new Error("Polling is not active.");
          }
          for (var i = 0; i < this.pollTransfers.length; i++) {
            try {
              this.pollTransfers[i].cancel();
            } catch (error) {
              this.emit("error", error);
            }
          }
          this.pollActive = false;
          if (callback)
            this.once("end", callback);
        };
        return InEndpoint2;
      }(Endpoint)
    );
    exports.InEndpoint = InEndpoint;
    var OutEndpoint = (
      /** @class */
      function(_super) {
        __extends(OutEndpoint2, _super);
        function OutEndpoint2() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this.direction = "out";
          return _this;
        }
        OutEndpoint2.prototype.transfer = function(buffer, callback) {
          var _this = this;
          if (!buffer) {
            buffer = Buffer.alloc(0);
          } else if (!isBuffer(buffer)) {
            buffer = Buffer.from(buffer);
          }
          var cb = function(error, _buffer, actual) {
            if (callback) {
              callback.call(_this, error, actual || 0);
            }
          };
          try {
            this.makeTransfer(this.timeout, cb).submit(buffer);
          } catch (e) {
            process.nextTick(function() {
              return cb(e);
            });
          }
          return this;
        };
        OutEndpoint2.prototype.transferWithZLP = function(buffer, callback) {
          if (buffer.length % this.descriptor.wMaxPacketSize === 0) {
            this.transfer(buffer);
            this.transfer(Buffer.alloc(0), callback);
          } else {
            this.transfer(buffer, callback);
          }
        };
        return OutEndpoint2;
      }(Endpoint)
    );
    exports.OutEndpoint = OutEndpoint;
  }
});

// node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/interface.js
var require_interface = __commonJS({
  "node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Interface = void 0;
    var bindings_1 = require_bindings2();
    var endpoint_1 = require_endpoint();
    var Interface = (
      /** @class */
      function() {
        function Interface2(device, id2) {
          this.device = device;
          this.id = id2;
          this.altSetting = 0;
          this.refresh();
        }
        Interface2.prototype.refresh = function() {
          if (!this.device.configDescriptor) {
            return;
          }
          this.descriptor = this.device.configDescriptor.interfaces[this.id][this.altSetting];
          this.interfaceNumber = this.descriptor.bInterfaceNumber;
          this.endpoints = [];
          var len = this.descriptor.endpoints.length;
          for (var i = 0; i < len; i++) {
            var desc = this.descriptor.endpoints[i];
            var c = desc.bEndpointAddress & bindings_1.LIBUSB_ENDPOINT_IN ? endpoint_1.InEndpoint : endpoint_1.OutEndpoint;
            this.endpoints[i] = new c(this.device, desc);
          }
        };
        Interface2.prototype.claim = function() {
          this.device.__claimInterface(this.id);
        };
        Interface2.prototype.release = function(closeEndpointsOrCallback, callback) {
          var _this = this;
          var closeEndpoints = false;
          if (typeof closeEndpointsOrCallback === "boolean") {
            closeEndpoints = closeEndpointsOrCallback;
          } else {
            callback = closeEndpointsOrCallback;
          }
          var next = function() {
            _this.device.__releaseInterface(_this.id, function(error) {
              if (!error) {
                _this.altSetting = 0;
                _this.refresh();
              }
              if (callback) {
                callback.call(_this, error);
              }
            });
          };
          if (!closeEndpoints || this.endpoints.length === 0) {
            next();
          } else {
            var n_1 = this.endpoints.length;
            this.endpoints.forEach(function(ep) {
              if (ep.direction === "in" && ep.pollActive) {
                ep.once("end", function() {
                  if (--n_1 === 0) {
                    next();
                  }
                });
                ep.stopPoll();
              } else {
                if (--n_1 === 0) {
                  next();
                }
              }
            });
          }
        };
        Interface2.prototype.isKernelDriverActive = function() {
          return this.device.__isKernelDriverActive(this.id);
        };
        Interface2.prototype.detachKernelDriver = function() {
          return this.device.__detachKernelDriver(this.id);
        };
        Interface2.prototype.attachKernelDriver = function() {
          return this.device.__attachKernelDriver(this.id);
        };
        Interface2.prototype.setAltSetting = function(altSetting, callback) {
          var _this = this;
          this.device.__setInterface(this.id, altSetting, function(error) {
            if (!error) {
              _this.altSetting = altSetting;
              _this.refresh();
            }
            if (callback) {
              callback.call(_this, error);
            }
          });
        };
        Interface2.prototype.endpoint = function(addr) {
          return this.endpoints.find(function(item) {
            return item.address === addr;
          });
        };
        return Interface2;
      }()
    );
    exports.Interface = Interface;
  }
});

// node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/capability.js
var require_capability = __commonJS({
  "node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/capability.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Capability = void 0;
    var Capability = (
      /** @class */
      /* @__PURE__ */ function() {
        function Capability2(device, id2) {
          this.device = device;
          this.id = id2;
          if (!device._bosDescriptor) {
            throw new Error("bosDescriptor not found");
          }
          this.descriptor = device._bosDescriptor.capabilities[this.id];
          this.type = this.descriptor.bDevCapabilityType;
          this.data = this.descriptor.dev_capability_data;
        }
        return Capability2;
      }()
    );
    exports.Capability = Capability;
  }
});

// node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/device.js
var require_device = __commonJS({
  "node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/device.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExtendedDevice = void 0;
    var usb2 = require_bindings2();
    var interface_1 = require_interface();
    var capability_1 = require_capability();
    var isBuffer = function(obj) {
      return !!obj && obj instanceof Uint8Array;
    };
    var DEFAULT_TIMEOUT = 1e3;
    var ExtendedDevice = (
      /** @class */
      function() {
        function ExtendedDevice2() {
          this._timeout = DEFAULT_TIMEOUT;
        }
        Object.defineProperty(ExtendedDevice2.prototype, "timeout", {
          /**
           * Timeout in milliseconds to use for control transfers.
           */
          get: function() {
            return this._timeout || DEFAULT_TIMEOUT;
          },
          set: function(value) {
            this._timeout = value;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ExtendedDevice2.prototype, "configDescriptor", {
          /**
           * Object with properties for the fields of the active configuration descriptor.
           */
          get: function() {
            try {
              return this.__getConfigDescriptor();
            } catch (e) {
              if (e.errno === usb2.LIBUSB_ERROR_NOT_FOUND) {
                return void 0;
              }
              throw e;
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ExtendedDevice2.prototype, "allConfigDescriptors", {
          /**
           * Contains all config descriptors of the device (same structure as .configDescriptor above)
           */
          get: function() {
            try {
              return this.__getAllConfigDescriptors();
            } catch (e) {
              if (e.errno === usb2.LIBUSB_ERROR_NOT_FOUND) {
                return [];
              }
              throw e;
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(ExtendedDevice2.prototype, "parent", {
          /**
           * Contains the parent of the device, such as a hub. If there is no parent this property is set to `null`.
           */
          get: function() {
            return this.__getParent();
          },
          enumerable: false,
          configurable: true
        });
        ExtendedDevice2.prototype.open = function(defaultConfig) {
          if (defaultConfig === void 0) {
            defaultConfig = true;
          }
          this.__open();
          if (defaultConfig === false) {
            return;
          }
          this.interfaces = [];
          var len = this.configDescriptor ? this.configDescriptor.interfaces.length : 0;
          for (var i = 0; i < len; i++) {
            this.interfaces[i] = new interface_1.Interface(this, i);
          }
        };
        ExtendedDevice2.prototype.close = function() {
          this.__close();
          this.interfaces = void 0;
        };
        ExtendedDevice2.prototype.setConfiguration = function(desired, callback) {
          var _this = this;
          this.__setConfiguration(desired, function(error) {
            if (!error) {
              _this.interfaces = [];
              var len = _this.configDescriptor ? _this.configDescriptor.interfaces.length : 0;
              for (var i = 0; i < len; i++) {
                _this.interfaces[i] = new interface_1.Interface(_this, i);
              }
            }
            if (callback) {
              callback.call(_this, error);
            }
          });
        };
        ExtendedDevice2.prototype.controlTransfer = function(bmRequestType, bRequest, wValue, wIndex, data_or_length, callback) {
          var _this = this;
          var isIn = !!(bmRequestType & usb2.LIBUSB_ENDPOINT_IN);
          var wLength = isIn ? data_or_length : data_or_length.length;
          if (isIn) {
            if (!(data_or_length >= 0)) {
              throw new TypeError("Expected size number for IN transfer (based on bmRequestType)");
            }
          } else {
            if (!isBuffer(data_or_length)) {
              throw new TypeError("Expected buffer for OUT transfer (based on bmRequestType)");
            }
          }
          var buf = Buffer.alloc(wLength + usb2.LIBUSB_CONTROL_SETUP_SIZE);
          buf.writeUInt8(bmRequestType, 0);
          buf.writeUInt8(bRequest, 1);
          buf.writeUInt16LE(wValue, 2);
          buf.writeUInt16LE(wIndex, 4);
          buf.writeUInt16LE(wLength, 6);
          if (!isIn) {
            buf.set(data_or_length, usb2.LIBUSB_CONTROL_SETUP_SIZE);
          }
          var transfer = new usb2.Transfer(this, 0, usb2.LIBUSB_TRANSFER_TYPE_CONTROL, this.timeout, function(error, buf2, actual) {
            if (callback) {
              if (isIn) {
                callback.call(_this, error, buf2.slice(usb2.LIBUSB_CONTROL_SETUP_SIZE, usb2.LIBUSB_CONTROL_SETUP_SIZE + actual));
              } else {
                callback.call(_this, error, actual);
              }
            }
          });
          try {
            transfer.submit(buf);
          } catch (e) {
            if (callback) {
              process.nextTick(function() {
                return callback.call(_this, e, void 0);
              });
            }
          }
          return this;
        };
        ExtendedDevice2.prototype.interface = function(addr) {
          if (!this.interfaces) {
            throw new Error("Device must be open before searching for interfaces");
          }
          addr = addr || 0;
          for (var i = 0; i < this.interfaces.length; i++) {
            if (this.interfaces[i].interfaceNumber === addr) {
              return this.interfaces[i];
            }
          }
          throw new Error("Interface not found for address: " + addr);
        };
        ExtendedDevice2.prototype.getStringDescriptor = function(desc_index, callback) {
          if (desc_index === 0) {
            callback();
            return;
          }
          var langid = 1033;
          var length = 255;
          this.controlTransfer(usb2.LIBUSB_ENDPOINT_IN, usb2.LIBUSB_REQUEST_GET_DESCRIPTOR, usb2.LIBUSB_DT_STRING << 8 | desc_index, langid, length, function(error, buffer) {
            if (error) {
              return callback(error);
            }
            callback(void 0, isBuffer(buffer) ? buffer.toString("utf16le", 2) : void 0);
          });
        };
        ExtendedDevice2.prototype.getBosDescriptor = function(callback) {
          var _this = this;
          if (this._bosDescriptor) {
            return callback(void 0, this._bosDescriptor);
          }
          if (this.deviceDescriptor.bcdUSB < 513) {
            return callback(void 0, void 0);
          }
          this.controlTransfer(usb2.LIBUSB_ENDPOINT_IN, usb2.LIBUSB_REQUEST_GET_DESCRIPTOR, usb2.LIBUSB_DT_BOS << 8, 0, usb2.LIBUSB_DT_BOS_SIZE, function(error, buffer) {
            if (error) {
              if (error.errno === usb2.LIBUSB_TRANSFER_STALL)
                return callback(void 0, void 0);
              return callback(error, void 0);
            }
            if (!isBuffer(buffer)) {
              return callback(void 0, void 0);
            }
            var totalLength = buffer.readUInt16LE(2);
            _this.controlTransfer(usb2.LIBUSB_ENDPOINT_IN, usb2.LIBUSB_REQUEST_GET_DESCRIPTOR, usb2.LIBUSB_DT_BOS << 8, 0, totalLength, function(error2, buffer2) {
              if (error2) {
                if (error2.errno === usb2.LIBUSB_TRANSFER_STALL)
                  return callback(void 0, void 0);
                return callback(error2, void 0);
              }
              if (!isBuffer(buffer2)) {
                return callback(void 0, void 0);
              }
              var descriptor = {
                bLength: buffer2.readUInt8(0),
                bDescriptorType: buffer2.readUInt8(1),
                wTotalLength: buffer2.readUInt16LE(2),
                bNumDeviceCaps: buffer2.readUInt8(4),
                capabilities: []
              };
              var i = usb2.LIBUSB_DT_BOS_SIZE;
              while (i < descriptor.wTotalLength) {
                var capability = {
                  bLength: buffer2.readUInt8(i + 0),
                  bDescriptorType: buffer2.readUInt8(i + 1),
                  bDevCapabilityType: buffer2.readUInt8(i + 2),
                  dev_capability_data: buffer2.slice(i + 3, i + buffer2.readUInt8(i + 0))
                };
                descriptor.capabilities.push(capability);
                i += capability.bLength;
              }
              _this._bosDescriptor = descriptor;
              callback(void 0, _this._bosDescriptor);
            });
          });
        };
        ExtendedDevice2.prototype.getCapabilities = function(callback) {
          var _this = this;
          var capabilities = [];
          this.getBosDescriptor(function(error, descriptor) {
            if (error)
              return callback(error, void 0);
            var len = descriptor ? descriptor.capabilities.length : 0;
            for (var i = 0; i < len; i++) {
              capabilities.push(new capability_1.Capability(_this, i));
            }
            callback(void 0, capabilities);
          });
        };
        return ExtendedDevice2;
      }()
    );
    exports.ExtendedDevice = ExtendedDevice;
  }
});

// node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/index.js
var require_usb = __commonJS({
  "node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/index.js"(exports, module) {
    "use strict";
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var events_1 = require_events();
    var device_1 = require_device();
    var usb2 = require_bindings2();
    if (usb2.INIT_ERROR) {
      console.warn("Failed to initialize libusb.");
    }
    Object.setPrototypeOf(usb2, events_1.EventEmitter.prototype);
    Object.defineProperty(usb2, "pollHotplug", {
      value: false,
      writable: true
    });
    Object.defineProperty(usb2, "pollHotplugDelay", {
      value: 500,
      writable: true
    });
    Object.getOwnPropertyNames(device_1.ExtendedDevice.prototype).forEach(function(name) {
      Object.defineProperty(usb2.Device.prototype, name, Object.getOwnPropertyDescriptor(device_1.ExtendedDevice.prototype, name) || /* @__PURE__ */ Object.create(null));
    });
    var hotPlugDevices = /* @__PURE__ */ new Set();
    var emitHotplugEvents = function() {
      var e_1, _a, e_2, _b;
      var devices2 = new Set(usb2.getDeviceList());
      try {
        for (var devices_1 = __values(devices2), devices_1_1 = devices_1.next(); !devices_1_1.done; devices_1_1 = devices_1.next()) {
          var device = devices_1_1.value;
          if (!hotPlugDevices.has(device)) {
            usb2.emit("attach", device);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (devices_1_1 && !devices_1_1.done && (_a = devices_1.return)) _a.call(devices_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      try {
        for (var hotPlugDevices_1 = __values(hotPlugDevices), hotPlugDevices_1_1 = hotPlugDevices_1.next(); !hotPlugDevices_1_1.done; hotPlugDevices_1_1 = hotPlugDevices_1.next()) {
          var device = hotPlugDevices_1_1.value;
          if (!devices2.has(device)) {
            usb2.emit("detach", device);
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (hotPlugDevices_1_1 && !hotPlugDevices_1_1.done && (_b = hotPlugDevices_1.return)) _b.call(hotPlugDevices_1);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      hotPlugDevices = devices2;
    };
    var pollingHotplug = false;
    var pollHotplug = function(start) {
      if (start === void 0) {
        start = false;
      }
      if (start) {
        pollingHotplug = true;
      } else if (!pollingHotplug) {
        return;
      } else {
        emitHotplugEvents();
      }
      setTimeout(function() {
        return pollHotplug();
      }, usb2.pollHotplugDelay);
    };
    var devicesChanged = function() {
      return setTimeout(function() {
        return emitHotplugEvents();
      }, usb2.pollHotplugDelay);
    };
    var hotplugSupported = 0;
    var startHotplug = function() {
      hotplugSupported = usb2.pollHotplug ? 0 : usb2._supportedHotplugEvents();
      if (hotplugSupported !== 1) {
        hotPlugDevices = new Set(usb2.getDeviceList());
      }
      if (hotplugSupported) {
        usb2._enableHotplugEvents();
        if (hotplugSupported === 2) {
          usb2.on("attachIds", devicesChanged);
          usb2.on("detachIds", devicesChanged);
        }
      } else {
        pollHotplug(true);
      }
    };
    var stopHotplug = function() {
      if (hotplugSupported) {
        usb2._disableHotplugEvents();
        if (hotplugSupported === 2) {
          usb2.off("attachIds", devicesChanged);
          usb2.off("detachIds", devicesChanged);
        }
      } else {
        pollingHotplug = false;
      }
    };
    usb2.on("newListener", function(event) {
      if (event !== "attach" && event !== "detach") {
        return;
      }
      var listenerCount = usb2.listenerCount("attach") + usb2.listenerCount("detach");
      if (listenerCount === 0) {
        startHotplug();
      }
    });
    usb2.on("removeListener", function(event) {
      if (event !== "attach" && event !== "detach") {
        return;
      }
      var listenerCount = usb2.listenerCount("attach") + usb2.listenerCount("detach");
      if (listenerCount === 0) {
        stopHotplug();
      }
    });
    module.exports = usb2;
  }
});

// node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/webusb/webusb-device.js
var require_webusb_device = __commonJS({
  "node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/webusb/webusb-device.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebUSBDevice = void 0;
    var usb2 = require_usb();
    var util_1 = require_util();
    var LIBUSB_TRANSFER_TYPE_MASK = 3;
    var ENDPOINT_NUMBER_MASK = 127;
    var CLEAR_FEATURE = 1;
    var ENDPOINT_HALT = 0;
    var WebUSBDevice = (
      /** @class */
      function() {
        function WebUSBDevice2(device) {
          this.device = device;
          this.configurations = [];
          var usbVersion = this.decodeVersion(device.deviceDescriptor.bcdUSB);
          this.usbVersionMajor = usbVersion.major;
          this.usbVersionMinor = usbVersion.minor;
          this.usbVersionSubminor = usbVersion.sub;
          this.deviceClass = device.deviceDescriptor.bDeviceClass;
          this.deviceSubclass = device.deviceDescriptor.bDeviceSubClass;
          this.deviceProtocol = device.deviceDescriptor.bDeviceProtocol;
          this.vendorId = device.deviceDescriptor.idVendor;
          this.productId = device.deviceDescriptor.idProduct;
          var deviceVersion = this.decodeVersion(device.deviceDescriptor.bcdDevice);
          this.deviceVersionMajor = deviceVersion.major;
          this.deviceVersionMinor = deviceVersion.minor;
          this.deviceVersionSubminor = deviceVersion.sub;
        }
        WebUSBDevice2.createInstance = function(device) {
          return __awaiter(this, void 0, void 0, function() {
            var instance;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  instance = new WebUSBDevice2(device);
                  return [4, instance.initialize()];
                case 1:
                  _a.sent();
                  return [2, instance];
              }
            });
          });
        };
        Object.defineProperty(WebUSBDevice2.prototype, "configuration", {
          get: function() {
            if (!this.device.configDescriptor) {
              return void 0;
            }
            var currentConfiguration = this.device.configDescriptor.bConfigurationValue;
            return this.configurations.find(function(configuration) {
              return configuration.configurationValue === currentConfiguration;
            });
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(WebUSBDevice2.prototype, "opened", {
          get: function() {
            return !!this.device.interfaces;
          },
          enumerable: false,
          configurable: true
        });
        WebUSBDevice2.prototype.open = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              try {
                if (this.opened) {
                  return [
                    2
                    /*return*/
                  ];
                }
                this.device.open();
              } catch (error) {
                throw new Error("open error: " + error);
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        WebUSBDevice2.prototype.close = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _a, _b, iface, e_1_1, _error_1, error_1;
            var e_1, _c;
            return __generator(this, function(_d) {
              switch (_d.label) {
                case 0:
                  _d.trys.push([0, 12, , 13]);
                  if (!this.opened) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  _d.label = 1;
                case 1:
                  _d.trys.push([1, 10, , 11]);
                  if (!this.configuration) return [3, 9];
                  _d.label = 2;
                case 2:
                  _d.trys.push([2, 7, 8, 9]);
                  _a = __values(this.configuration.interfaces), _b = _a.next();
                  _d.label = 3;
                case 3:
                  if (!!_b.done) return [3, 6];
                  iface = _b.value;
                  return [4, this._releaseInterface(iface.interfaceNumber)];
                case 4:
                  _d.sent();
                  this.configuration.interfaces[this.configuration.interfaces.indexOf(iface)] = {
                    interfaceNumber: iface.interfaceNumber,
                    alternate: iface.alternate,
                    alternates: iface.alternates,
                    claimed: false
                  };
                  _d.label = 5;
                case 5:
                  _b = _a.next();
                  return [3, 3];
                case 6:
                  return [3, 9];
                case 7:
                  e_1_1 = _d.sent();
                  e_1 = { error: e_1_1 };
                  return [3, 9];
                case 8:
                  try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                  } finally {
                    if (e_1) throw e_1.error;
                  }
                  return [
                    7
                    /*endfinally*/
                  ];
                case 9:
                  return [3, 11];
                case 10:
                  _error_1 = _d.sent();
                  return [3, 11];
                case 11:
                  this.device.close();
                  return [3, 13];
                case 12:
                  error_1 = _d.sent();
                  throw new Error("close error: " + error_1);
                case 13:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSBDevice2.prototype.selectConfiguration = function(configurationValue) {
          return __awaiter(this, void 0, void 0, function() {
            var config, setConfiguration, error_2;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.opened || !this.device.configDescriptor) {
                    throw new Error("selectConfiguration error: invalid state");
                  }
                  if (this.device.configDescriptor.bConfigurationValue === configurationValue) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  config = this.configurations.find(function(configuration) {
                    return configuration.configurationValue === configurationValue;
                  });
                  if (!config) {
                    throw new Error("selectConfiguration error: configuration not found");
                  }
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  setConfiguration = util_1.promisify(this.device.setConfiguration).bind(this.device);
                  return [4, setConfiguration(configurationValue)];
                case 2:
                  _a.sent();
                  return [3, 4];
                case 3:
                  error_2 = _a.sent();
                  throw new Error("selectConfiguration error: " + error_2);
                case 4:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSBDevice2.prototype.claimInterface = function(interfaceNumber) {
          return __awaiter(this, void 0, void 0, function() {
            var iface;
            return __generator(this, function(_a) {
              if (!this.opened) {
                throw new Error("claimInterface error: invalid state");
              }
              if (!this.configuration) {
                throw new Error("claimInterface error: interface not found");
              }
              iface = this.configuration.interfaces.find(function(usbInterface) {
                return usbInterface.interfaceNumber === interfaceNumber;
              });
              if (!iface) {
                throw new Error("claimInterface error: interface not found");
              }
              if (iface.claimed) {
                return [
                  2
                  /*return*/
                ];
              }
              try {
                this.device.interface(interfaceNumber).claim();
                this.configuration.interfaces[this.configuration.interfaces.indexOf(iface)] = {
                  interfaceNumber,
                  alternate: iface.alternate,
                  alternates: iface.alternates,
                  claimed: true
                };
              } catch (error) {
                throw new Error("claimInterface error: " + error);
              }
              return [
                2
                /*return*/
              ];
            });
          });
        };
        WebUSBDevice2.prototype.releaseInterface = function(interfaceNumber) {
          return __awaiter(this, void 0, void 0, function() {
            var iface;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this._releaseInterface(interfaceNumber)];
                case 1:
                  _a.sent();
                  if (this.configuration) {
                    iface = this.configuration.interfaces.find(function(usbInterface) {
                      return usbInterface.interfaceNumber === interfaceNumber;
                    });
                    if (iface) {
                      this.configuration.interfaces[this.configuration.interfaces.indexOf(iface)] = {
                        interfaceNumber,
                        alternate: iface.alternate,
                        alternates: iface.alternates,
                        claimed: false
                      };
                    }
                  }
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSBDevice2.prototype.selectAlternateInterface = function(interfaceNumber, alternateSetting) {
          return __awaiter(this, void 0, void 0, function() {
            var iface, iface_1, setAltSetting, error_3;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.opened) {
                    throw new Error("selectAlternateInterface error: invalid state");
                  }
                  if (!this.configuration) {
                    throw new Error("selectAlternateInterface error: interface not found");
                  }
                  iface = this.configuration.interfaces.find(function(usbInterface) {
                    return usbInterface.interfaceNumber === interfaceNumber;
                  });
                  if (!iface) {
                    throw new Error("selectAlternateInterface error: interface not found");
                  }
                  if (!iface.claimed) {
                    throw new Error("selectAlternateInterface error: invalid state");
                  }
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  iface_1 = this.device.interface(interfaceNumber);
                  setAltSetting = util_1.promisify(iface_1.setAltSetting).bind(iface_1);
                  return [4, setAltSetting(alternateSetting)];
                case 2:
                  _a.sent();
                  return [3, 4];
                case 3:
                  error_3 = _a.sent();
                  throw new Error("selectAlternateInterface error: " + error_3);
                case 4:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSBDevice2.prototype.controlTransferIn = function(setup, length) {
          return __awaiter(this, void 0, void 0, function() {
            var type, controlTransfer, result, error_4;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  _a.trys.push([0, 2, , 3]);
                  type = this.controlTransferParamsToType(setup, usb2.LIBUSB_ENDPOINT_IN);
                  controlTransfer = util_1.promisify(this.device.controlTransfer).bind(this.device);
                  return [4, controlTransfer(type, setup.request, setup.value, setup.index, length)];
                case 1:
                  result = _a.sent();
                  return [2, {
                    data: result ? new DataView(new Uint8Array(result).buffer) : void 0,
                    status: "ok"
                  }];
                case 2:
                  error_4 = _a.sent();
                  if (error_4.errno === usb2.LIBUSB_TRANSFER_STALL) {
                    return [2, {
                      status: "stall"
                    }];
                  }
                  if (error_4.errno === usb2.LIBUSB_TRANSFER_OVERFLOW) {
                    return [2, {
                      status: "babble"
                    }];
                  }
                  throw new Error("controlTransferIn error: " + error_4);
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSBDevice2.prototype.controlTransferOut = function(setup, data) {
          return __awaiter(this, void 0, void 0, function() {
            var type, controlTransfer, buffer, bytesWritten, error_5;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  _a.trys.push([0, 2, , 3]);
                  type = this.controlTransferParamsToType(setup, usb2.LIBUSB_ENDPOINT_OUT);
                  controlTransfer = util_1.promisify(this.device.controlTransfer).bind(this.device);
                  buffer = data ? Buffer.from(data) : Buffer.alloc(0);
                  return [4, controlTransfer(type, setup.request, setup.value, setup.index, buffer)];
                case 1:
                  bytesWritten = _a.sent();
                  return [2, {
                    bytesWritten,
                    status: "ok"
                  }];
                case 2:
                  error_5 = _a.sent();
                  if (error_5.errno === usb2.LIBUSB_TRANSFER_STALL) {
                    return [2, {
                      bytesWritten: 0,
                      status: "stall"
                    }];
                  }
                  throw new Error("controlTransferOut error: " + error_5);
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSBDevice2.prototype.clearHalt = function(direction, endpointNumber) {
          return __awaiter(this, void 0, void 0, function() {
            var wIndex, controlTransfer, error_6;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  _a.trys.push([0, 2, , 3]);
                  wIndex = endpointNumber | (direction === "in" ? usb2.LIBUSB_ENDPOINT_IN : usb2.LIBUSB_ENDPOINT_OUT);
                  controlTransfer = util_1.promisify(this.device.controlTransfer).bind(this.device);
                  return [4, controlTransfer(usb2.LIBUSB_RECIPIENT_ENDPOINT, CLEAR_FEATURE, ENDPOINT_HALT, wIndex, 0)];
                case 1:
                  _a.sent();
                  return [3, 3];
                case 2:
                  error_6 = _a.sent();
                  throw new Error("clearHalt error: " + error_6);
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSBDevice2.prototype.transferIn = function(endpointNumber, length) {
          return __awaiter(this, void 0, void 0, function() {
            var endpoint, transfer, result, error_7;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  _a.trys.push([0, 2, , 3]);
                  endpoint = this.getEndpoint(endpointNumber | usb2.LIBUSB_ENDPOINT_IN);
                  transfer = util_1.promisify(endpoint.transfer).bind(endpoint);
                  return [4, transfer(length)];
                case 1:
                  result = _a.sent();
                  return [2, {
                    data: result ? new DataView(new Uint8Array(result).buffer) : void 0,
                    status: "ok"
                  }];
                case 2:
                  error_7 = _a.sent();
                  if (error_7.errno === usb2.LIBUSB_TRANSFER_STALL) {
                    return [2, {
                      status: "stall"
                    }];
                  }
                  if (error_7.errno === usb2.LIBUSB_TRANSFER_OVERFLOW) {
                    return [2, {
                      status: "babble"
                    }];
                  }
                  throw new Error("transferIn error: " + error_7);
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSBDevice2.prototype.transferOut = function(endpointNumber, data) {
          return __awaiter(this, void 0, void 0, function() {
            var endpoint, transfer, buffer, bytesWritten, error_8;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  _a.trys.push([0, 2, , 3]);
                  endpoint = this.getEndpoint(endpointNumber | usb2.LIBUSB_ENDPOINT_OUT);
                  transfer = util_1.promisify(endpoint.transfer).bind(endpoint);
                  buffer = Buffer.from(data);
                  return [4, transfer(buffer)];
                case 1:
                  bytesWritten = _a.sent();
                  return [2, {
                    bytesWritten,
                    status: "ok"
                  }];
                case 2:
                  error_8 = _a.sent();
                  if (error_8.errno === usb2.LIBUSB_TRANSFER_STALL) {
                    return [2, {
                      bytesWritten: 0,
                      status: "stall"
                    }];
                  }
                  throw new Error("transferOut error: " + error_8);
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSBDevice2.prototype.reset = function() {
          return __awaiter(this, void 0, void 0, function() {
            var reset, error_9;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  _a.trys.push([0, 2, , 3]);
                  reset = util_1.promisify(this.device.reset).bind(this.device);
                  return [4, reset()];
                case 1:
                  _a.sent();
                  return [3, 3];
                case 2:
                  error_9 = _a.sent();
                  throw new Error("reset error: " + error_9);
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSBDevice2.prototype.isochronousTransferIn = function(_endpointNumber, _packetLengths) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              throw new Error("isochronousTransferIn error: method not implemented");
            });
          });
        };
        WebUSBDevice2.prototype.isochronousTransferOut = function(_endpointNumber, _data, _packetLengths) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              throw new Error("isochronousTransferOut error: method not implemented");
            });
          });
        };
        WebUSBDevice2.prototype.forget = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              throw new Error("forget error: method not implemented");
            });
          });
        };
        WebUSBDevice2.prototype.initialize = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _a, _b, _c, _d, error_10;
            return __generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  _e.trys.push([0, 5, 6, 7]);
                  if (!this.opened) {
                    this.device.open();
                  }
                  _a = this;
                  return [4, this.getStringDescriptor(this.device.deviceDescriptor.iManufacturer)];
                case 1:
                  _a.manufacturerName = _e.sent();
                  _b = this;
                  return [4, this.getStringDescriptor(this.device.deviceDescriptor.iProduct)];
                case 2:
                  _b.productName = _e.sent();
                  _c = this;
                  return [4, this.getStringDescriptor(this.device.deviceDescriptor.iSerialNumber)];
                case 3:
                  _c.serialNumber = _e.sent();
                  _d = this;
                  return [4, this.getConfigurations()];
                case 4:
                  _d.configurations = _e.sent();
                  return [3, 7];
                case 5:
                  error_10 = _e.sent();
                  throw new Error("initialize error: " + error_10);
                case 6:
                  if (this.opened) {
                    this.device.close();
                  }
                  return [
                    7
                    /*endfinally*/
                  ];
                case 7:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSBDevice2.prototype.decodeVersion = function(version) {
          var hex = ("0000" + version.toString(16)).slice(-4);
          return {
            major: parseInt(hex.substr(0, 2), void 0),
            minor: parseInt(hex.substr(2, 1), void 0),
            sub: parseInt(hex.substr(3, 1), void 0)
          };
        };
        WebUSBDevice2.prototype.getStringDescriptor = function(index) {
          return __awaiter(this, void 0, void 0, function() {
            var getStringDescriptor, buffer, error_11;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  _a.trys.push([0, 2, , 3]);
                  getStringDescriptor = util_1.promisify(this.device.getStringDescriptor).bind(this.device);
                  return [4, getStringDescriptor(index)];
                case 1:
                  buffer = _a.sent();
                  return [2, buffer ? buffer.toString() : ""];
                case 2:
                  error_11 = _a.sent();
                  return [2, ""];
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSBDevice2.prototype.getConfigurations = function() {
          return __awaiter(this, void 0, void 0, function() {
            var configs, _a, _b, config, interfaces, _loop_1, this_1, _c, _d, iface, e_2_1, _e, _f, e_3_1;
            var e_3, _g, e_2, _h, _j;
            var _this = this;
            return __generator(this, function(_k) {
              switch (_k.label) {
                case 0:
                  configs = [];
                  _k.label = 1;
                case 1:
                  _k.trys.push([1, 14, 15, 16]);
                  _a = __values(this.device.allConfigDescriptors), _b = _a.next();
                  _k.label = 2;
                case 2:
                  if (!!_b.done) return [3, 13];
                  config = _b.value;
                  interfaces = [];
                  _loop_1 = function(iface2) {
                    var alternates, iface_2, iface_2_1, alternate_1, endpoints, _l, _m, endpoint, _o, _p, e_4_1, interfaceNumber, alternate;
                    var e_4, _q, e_5, _r, _s;
                    return __generator(this, function(_t) {
                      switch (_t.label) {
                        case 0:
                          alternates = [];
                          _t.label = 1;
                        case 1:
                          _t.trys.push([1, 6, 7, 8]);
                          iface_2 = (e_4 = void 0, __values(iface2)), iface_2_1 = iface_2.next();
                          _t.label = 2;
                        case 2:
                          if (!!iface_2_1.done) return [3, 5];
                          alternate_1 = iface_2_1.value;
                          endpoints = [];
                          try {
                            for (_l = (e_5 = void 0, __values(alternate_1.endpoints)), _m = _l.next(); !_m.done; _m = _l.next()) {
                              endpoint = _m.value;
                              endpoints.push({
                                endpointNumber: endpoint.bEndpointAddress & ENDPOINT_NUMBER_MASK,
                                direction: endpoint.bEndpointAddress & usb2.LIBUSB_ENDPOINT_IN ? "in" : "out",
                                type: (endpoint.bmAttributes & LIBUSB_TRANSFER_TYPE_MASK) === usb2.LIBUSB_TRANSFER_TYPE_BULK ? "bulk" : (endpoint.bmAttributes & LIBUSB_TRANSFER_TYPE_MASK) === usb2.LIBUSB_TRANSFER_TYPE_INTERRUPT ? "interrupt" : "isochronous",
                                packetSize: endpoint.wMaxPacketSize
                              });
                            }
                          } catch (e_5_1) {
                            e_5 = { error: e_5_1 };
                          } finally {
                            try {
                              if (_m && !_m.done && (_r = _l.return)) _r.call(_l);
                            } finally {
                              if (e_5) throw e_5.error;
                            }
                          }
                          _p = (_o = alternates).push;
                          _s = {
                            alternateSetting: alternate_1.bAlternateSetting,
                            interfaceClass: alternate_1.bInterfaceClass,
                            interfaceSubclass: alternate_1.bInterfaceSubClass,
                            interfaceProtocol: alternate_1.bInterfaceProtocol
                          };
                          return [4, this_1.getStringDescriptor(alternate_1.iInterface)];
                        case 3:
                          _p.apply(_o, [(_s.interfaceName = _t.sent(), _s.endpoints = endpoints, _s)]);
                          _t.label = 4;
                        case 4:
                          iface_2_1 = iface_2.next();
                          return [3, 2];
                        case 5:
                          return [3, 8];
                        case 6:
                          e_4_1 = _t.sent();
                          e_4 = { error: e_4_1 };
                          return [3, 8];
                        case 7:
                          try {
                            if (iface_2_1 && !iface_2_1.done && (_q = iface_2.return)) _q.call(iface_2);
                          } finally {
                            if (e_4) throw e_4.error;
                          }
                          return [
                            7
                            /*endfinally*/
                          ];
                        case 8:
                          interfaceNumber = iface2[0].bInterfaceNumber;
                          alternate = alternates.find(function(alt) {
                            return alt.alternateSetting === _this.device.interface(interfaceNumber).altSetting;
                          });
                          if (alternate) {
                            interfaces.push({
                              interfaceNumber,
                              alternate,
                              alternates,
                              claimed: false
                            });
                          }
                          return [
                            2
                            /*return*/
                          ];
                      }
                    });
                  };
                  this_1 = this;
                  _k.label = 3;
                case 3:
                  _k.trys.push([3, 8, 9, 10]);
                  _c = (e_2 = void 0, __values(config.interfaces)), _d = _c.next();
                  _k.label = 4;
                case 4:
                  if (!!_d.done) return [3, 7];
                  iface = _d.value;
                  return [5, _loop_1(iface)];
                case 5:
                  _k.sent();
                  _k.label = 6;
                case 6:
                  _d = _c.next();
                  return [3, 4];
                case 7:
                  return [3, 10];
                case 8:
                  e_2_1 = _k.sent();
                  e_2 = { error: e_2_1 };
                  return [3, 10];
                case 9:
                  try {
                    if (_d && !_d.done && (_h = _c.return)) _h.call(_c);
                  } finally {
                    if (e_2) throw e_2.error;
                  }
                  return [
                    7
                    /*endfinally*/
                  ];
                case 10:
                  _f = (_e = configs).push;
                  _j = {
                    configurationValue: config.bConfigurationValue
                  };
                  return [4, this.getStringDescriptor(config.iConfiguration)];
                case 11:
                  _f.apply(_e, [(_j.configurationName = _k.sent(), _j.interfaces = interfaces, _j)]);
                  _k.label = 12;
                case 12:
                  _b = _a.next();
                  return [3, 2];
                case 13:
                  return [3, 16];
                case 14:
                  e_3_1 = _k.sent();
                  e_3 = { error: e_3_1 };
                  return [3, 16];
                case 15:
                  try {
                    if (_b && !_b.done && (_g = _a.return)) _g.call(_a);
                  } finally {
                    if (e_3) throw e_3.error;
                  }
                  return [
                    7
                    /*endfinally*/
                  ];
                case 16:
                  return [2, configs];
              }
            });
          });
        };
        WebUSBDevice2.prototype.getEndpoint = function(address) {
          var e_6, _a;
          if (!this.device.interfaces) {
            return void 0;
          }
          try {
            for (var _b = __values(this.device.interfaces), _c = _b.next(); !_c.done; _c = _b.next()) {
              var iface = _c.value;
              var endpoint = iface.endpoint(address);
              if (endpoint) {
                return endpoint;
              }
            }
          } catch (e_6_1) {
            e_6 = { error: e_6_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally {
              if (e_6) throw e_6.error;
            }
          }
          return void 0;
        };
        WebUSBDevice2.prototype.controlTransferParamsToType = function(setup, direction) {
          var recipient = setup.recipient === "device" ? usb2.LIBUSB_RECIPIENT_DEVICE : setup.recipient === "interface" ? usb2.LIBUSB_RECIPIENT_INTERFACE : setup.recipient === "endpoint" ? usb2.LIBUSB_RECIPIENT_ENDPOINT : usb2.LIBUSB_RECIPIENT_OTHER;
          var requestType = setup.requestType === "standard" ? usb2.LIBUSB_REQUEST_TYPE_STANDARD : setup.requestType === "class" ? usb2.LIBUSB_REQUEST_TYPE_CLASS : usb2.LIBUSB_REQUEST_TYPE_VENDOR;
          return recipient | requestType | direction;
        };
        WebUSBDevice2.prototype._releaseInterface = function(interfaceNumber) {
          return __awaiter(this, void 0, void 0, function() {
            var iface, iface_3, release, error_12;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  if (!this.opened) {
                    throw new Error("releaseInterface error: invalid state");
                  }
                  if (!this.configuration) {
                    throw new Error("releaseInterface error: interface not found");
                  }
                  iface = this.configuration.interfaces.find(function(usbInterface) {
                    return usbInterface.interfaceNumber === interfaceNumber;
                  });
                  if (!iface) {
                    throw new Error("releaseInterface error: interface not found");
                  }
                  if (!iface.claimed) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  _a.label = 1;
                case 1:
                  _a.trys.push([1, 3, , 4]);
                  iface_3 = this.device.interface(interfaceNumber);
                  release = util_1.promisify(iface_3.release).bind(iface_3);
                  return [4, release()];
                case 2:
                  _a.sent();
                  return [3, 4];
                case 3:
                  error_12 = _a.sent();
                  throw new Error("releaseInterface error: " + error_12);
                case 4:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        return WebUSBDevice2;
      }()
    );
    exports.WebUSBDevice = WebUSBDevice;
  }
});

// node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/webusb/index.js
var require_webusb = __commonJS({
  "node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/webusb/index.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray = exports && exports.__spreadArray || function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebUSB = exports.getWebUsb = void 0;
    var usb2 = require_usb();
    var events_1 = require_events();
    var webusb_device_1 = require_webusb_device();
    var getWebUsb = function() {
      if (navigator && navigator.usb) {
        return navigator.usb;
      }
      return new WebUSB();
    };
    exports.getWebUsb = getWebUsb;
    var NamedError = (
      /** @class */
      function(_super) {
        __extends(NamedError2, _super);
        function NamedError2(message, name) {
          var _this = _super.call(this, message) || this;
          _this.name = name;
          return _this;
        }
        return NamedError2;
      }(Error)
    );
    var WebUSB = (
      /** @class */
      function() {
        function WebUSB2(options) {
          var _this = this;
          if (options === void 0) {
            options = {};
          }
          this.options = options;
          this.emitter = new events_1.EventEmitter();
          this.knownDevices = /* @__PURE__ */ new Map();
          this.authorisedDevices = /* @__PURE__ */ new Set();
          var deviceConnectCallback = function(device) {
            return __awaiter(_this, void 0, void 0, function() {
              var webDevice, event_1;
              return __generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    return [4, this.getWebDevice(device)];
                  case 1:
                    webDevice = _a.sent();
                    if (webDevice && this.isAuthorisedDevice(webDevice)) {
                      event_1 = {
                        type: "connect",
                        device: webDevice
                      };
                      this.emitter.emit("connect", event_1);
                    }
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          };
          var deviceDisconnectCallback = function(device) {
            return __awaiter(_this, void 0, void 0, function() {
              var webDevice, event_2;
              return __generator(this, function(_a) {
                if (this.knownDevices.has(device)) {
                  webDevice = this.knownDevices.get(device);
                  if (webDevice && this.isAuthorisedDevice(webDevice)) {
                    event_2 = {
                      type: "disconnect",
                      device: webDevice
                    };
                    this.emitter.emit("disconnect", event_2);
                  }
                }
                return [
                  2
                  /*return*/
                ];
              });
            });
          };
          this.emitter.on("newListener", function(event) {
            var listenerCount = _this.emitter.listenerCount(event);
            if (listenerCount !== 0) {
              return;
            }
            if (event === "connect") {
              usb2.addListener("attach", deviceConnectCallback);
            } else if (event === "disconnect") {
              usb2.addListener("detach", deviceDisconnectCallback);
            }
          });
          this.emitter.on("removeListener", function(event) {
            var listenerCount = _this.emitter.listenerCount(event);
            if (listenerCount !== 0) {
              return;
            }
            if (event === "connect") {
              usb2.removeListener("attach", deviceConnectCallback);
            } else if (event === "disconnect") {
              usb2.removeListener("detach", deviceDisconnectCallback);
            }
          });
        }
        Object.defineProperty(WebUSB2.prototype, "onconnect", {
          set: function(fn) {
            if (this._onconnect) {
              this.removeEventListener("connect", this._onconnect);
              this._onconnect = void 0;
            }
            if (fn) {
              this._onconnect = fn;
              this.addEventListener("connect", this._onconnect);
            }
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(WebUSB2.prototype, "ondisconnect", {
          set: function(fn) {
            if (this._ondisconnect) {
              this.removeEventListener("disconnect", this._ondisconnect);
              this._ondisconnect = void 0;
            }
            if (fn) {
              this._ondisconnect = fn;
              this.addEventListener("disconnect", this._ondisconnect);
            }
          },
          enumerable: false,
          configurable: true
        });
        WebUSB2.prototype.addEventListener = function(type, listener) {
          this.emitter.addListener(type, listener);
        };
        WebUSB2.prototype.removeEventListener = function(type, callback) {
          this.emitter.removeListener(type, callback);
        };
        WebUSB2.prototype.dispatchEvent = function(_event) {
          return false;
        };
        WebUSB2.prototype.requestDevice = function(options) {
          return __awaiter(this, void 0, void 0, function() {
            var devices2, device, _a, error_1;
            var _this = this;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!options) {
                    throw new TypeError("requestDevice error: 1 argument required, but only 0 present");
                  }
                  if (options.constructor !== {}.constructor) {
                    throw new TypeError("requestDevice error: parameter 1 (options) is not an object");
                  }
                  if (!options.filters) {
                    throw new TypeError("requestDevice error: required member filters is undefined");
                  }
                  if (options.filters.constructor !== [].constructor) {
                    throw new TypeError("requestDevice error: the provided value cannot be converted to a sequence");
                  }
                  options.filters.forEach(function(filter) {
                    if (filter.protocolCode && !filter.subclassCode) {
                      throw new TypeError("requestDevice error: subclass code is required");
                    }
                    if (filter.subclassCode && !filter.classCode) {
                      throw new TypeError("requestDevice error: class code is required");
                    }
                  });
                  return [4, this.loadDevices(options.filters)];
                case 1:
                  devices2 = _b.sent();
                  devices2 = devices2.filter(function(device2) {
                    return _this.filterDevice(device2, options.filters);
                  });
                  if (devices2.length === 0) {
                    throw new NamedError("Failed to execute 'requestDevice' on 'USB': No device selected.", "NotFoundError");
                  }
                  _b.label = 2;
                case 2:
                  _b.trys.push([2, 6, , 7]);
                  if (!this.options.devicesFound) return [3, 4];
                  return [4, this.options.devicesFound(devices2)];
                case 3:
                  _a = _b.sent();
                  return [3, 5];
                case 4:
                  _a = devices2[0];
                  _b.label = 5;
                case 5:
                  device = _a;
                  if (!device) {
                    throw new NamedError("Failed to execute 'requestDevice' on 'USB': No device selected.", "NotFoundError");
                  }
                  this.authorisedDevices.add({
                    vendorId: device.vendorId,
                    productId: device.productId,
                    classCode: device.deviceClass,
                    subclassCode: device.deviceSubclass,
                    protocolCode: device.deviceProtocol,
                    serialNumber: device.serialNumber
                  });
                  return [2, device];
                case 6:
                  error_1 = _b.sent();
                  throw new NamedError("Failed to execute 'requestDevice' on 'USB': No device selected.", "NotFoundError");
                case 7:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        WebUSB2.prototype.getDevices = function() {
          return __awaiter(this, void 0, void 0, function() {
            var preFilters, devices2;
            var _this = this;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  preFilters = this.options.allowAllDevices ? void 0 : this.options.allowedDevices;
                  return [4, this.loadDevices(preFilters)];
                case 1:
                  devices2 = _a.sent();
                  return [2, devices2.filter(function(device) {
                    return _this.isAuthorisedDevice(device);
                  })];
              }
            });
          });
        };
        WebUSB2.prototype.loadDevices = function(preFilters) {
          return __awaiter(this, void 0, void 0, function() {
            var devices2, refreshedKnownDevices, devices_1, devices_1_1, device, webDevice, e_1_1;
            var e_1, _a;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  devices2 = usb2.getDeviceList();
                  devices2 = this.quickFilter(devices2, preFilters);
                  refreshedKnownDevices = /* @__PURE__ */ new Map();
                  _b.label = 1;
                case 1:
                  _b.trys.push([1, 6, 7, 8]);
                  devices_1 = __values(devices2), devices_1_1 = devices_1.next();
                  _b.label = 2;
                case 2:
                  if (!!devices_1_1.done) return [3, 5];
                  device = devices_1_1.value;
                  return [4, this.getWebDevice(device)];
                case 3:
                  webDevice = _b.sent();
                  if (webDevice) {
                    refreshedKnownDevices.set(device, webDevice);
                  }
                  _b.label = 4;
                case 4:
                  devices_1_1 = devices_1.next();
                  return [3, 2];
                case 5:
                  return [3, 8];
                case 6:
                  e_1_1 = _b.sent();
                  e_1 = { error: e_1_1 };
                  return [3, 8];
                case 7:
                  try {
                    if (devices_1_1 && !devices_1_1.done && (_a = devices_1.return)) _a.call(devices_1);
                  } finally {
                    if (e_1) throw e_1.error;
                  }
                  return [
                    7
                    /*endfinally*/
                  ];
                case 8:
                  this.knownDevices = refreshedKnownDevices;
                  return [2, __spreadArray([], __read(this.knownDevices.values()))];
              }
            });
          });
        };
        WebUSB2.prototype.getWebDevice = function(device) {
          return __awaiter(this, void 0, void 0, function() {
            var webDevice, _a;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!!this.knownDevices.has(device)) return [3, 4];
                  if (this.options.deviceTimeout) {
                    device.timeout = this.options.deviceTimeout;
                  }
                  _b.label = 1;
                case 1:
                  _b.trys.push([1, 3, , 4]);
                  return [4, webusb_device_1.WebUSBDevice.createInstance(device)];
                case 2:
                  webDevice = _b.sent();
                  this.knownDevices.set(device, webDevice);
                  return [3, 4];
                case 3:
                  _a = _b.sent();
                  return [3, 4];
                case 4:
                  return [2, this.knownDevices.get(device)];
              }
            });
          });
        };
        WebUSB2.prototype.quickFilter = function(devices2, preFilters) {
          if (!preFilters || !preFilters.length) {
            return devices2;
          }
          return devices2.filter(function(device) {
            return preFilters.some(function(filter) {
              if (filter.vendorId && filter.vendorId !== device.deviceDescriptor.idVendor)
                return false;
              if (filter.productId && filter.productId !== device.deviceDescriptor.idProduct)
                return false;
              return true;
            });
          });
        };
        WebUSB2.prototype.filterDevice = function(device, filters) {
          if (!filters || !filters.length) {
            return true;
          }
          return filters.some(function(filter) {
            if (filter.vendorId && filter.vendorId !== device.vendorId)
              return false;
            if (filter.productId && filter.productId !== device.productId)
              return false;
            if (filter.classCode) {
              if (!device.configuration) {
                return false;
              }
              var match = device.configuration.interfaces.some(function(iface) {
                if (filter.classCode && filter.classCode !== iface.alternate.interfaceClass)
                  return false;
                if (filter.subclassCode && filter.subclassCode !== iface.alternate.interfaceSubclass)
                  return false;
                if (filter.protocolCode && filter.protocolCode !== iface.alternate.interfaceProtocol)
                  return false;
                return true;
              });
              if (match) {
                return true;
              }
            }
            if (filter.classCode && filter.classCode !== device.deviceClass)
              return false;
            if (filter.subclassCode && filter.subclassCode !== device.deviceSubclass)
              return false;
            if (filter.protocolCode && filter.protocolCode !== device.deviceProtocol)
              return false;
            if (filter.serialNumber && filter.serialNumber !== device.serialNumber)
              return false;
            return true;
          });
        };
        WebUSB2.prototype.isAuthorisedDevice = function(device) {
          if (this.options.allowAllDevices) {
            return true;
          }
          if (this.options.allowedDevices && this.filterDevice(device, this.options.allowedDevices)) {
            return true;
          }
          return __spreadArray([], __read(this.authorisedDevices.values())).some(function(authorised) {
            return authorised.vendorId === device.vendorId && authorised.productId === device.productId && authorised.classCode === device.deviceClass && authorised.subclassCode === device.deviceSubclass && authorised.protocolCode === device.deviceProtocol && authorised.serialNumber === device.serialNumber;
          });
        };
        return WebUSB2;
      }()
    );
    exports.WebUSB = WebUSB;
  }
});

// node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/descriptors.js
var require_descriptors = __commonJS({
  "node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/usb/descriptors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/index.js
var require_dist = __commonJS({
  "node_modules/.pnpm/usb@2.9.0/node_modules/usb/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __values = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
        next: function() {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LibUSBException = exports.useUsbDkBackend = exports.getDeviceList = exports.Transfer = exports.Device = exports.webusb = exports.findBySerialNumber = exports.findByIds = exports.usb = void 0;
    var util_1 = require_util();
    var webusb_1 = require_webusb();
    var usb2 = require_usb();
    exports.usb = usb2;
    var findByIds = function(vid, pid) {
      var devices2 = usb2.getDeviceList();
      return devices2.find(function(item) {
        return item.deviceDescriptor.idVendor === vid && item.deviceDescriptor.idProduct === pid;
      });
    };
    exports.findByIds = findByIds;
    var findBySerialNumber = function(serialNumber) {
      return __awaiter(void 0, void 0, void 0, function() {
        var devices2, opened, devices_1, devices_1_1, device, getStringDescriptor, buffer, _a, e_1_1;
        var e_1, _b;
        return __generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              devices2 = usb2.getDeviceList();
              opened = function(device2) {
                return !!device2.interfaces;
              };
              _c.label = 1;
            case 1:
              _c.trys.push([1, 9, 10, 11]);
              devices_1 = __values(devices2), devices_1_1 = devices_1.next();
              _c.label = 2;
            case 2:
              if (!!devices_1_1.done) return [3, 8];
              device = devices_1_1.value;
              _c.label = 3;
            case 3:
              _c.trys.push([3, 5, 6, 7]);
              if (!opened(device)) {
                device.open();
              }
              getStringDescriptor = util_1.promisify(device.getStringDescriptor).bind(device);
              return [4, getStringDescriptor(device.deviceDescriptor.iSerialNumber)];
            case 4:
              buffer = _c.sent();
              if (buffer && buffer.toString() === serialNumber) {
                return [2, device];
              }
              return [3, 7];
            case 5:
              _a = _c.sent();
              return [3, 7];
            case 6:
              try {
                if (opened(device)) {
                  device.close();
                }
              } catch (_d) {
              }
              return [
                7
                /*endfinally*/
              ];
            case 7:
              devices_1_1 = devices_1.next();
              return [3, 2];
            case 8:
              return [3, 11];
            case 9:
              e_1_1 = _c.sent();
              e_1 = { error: e_1_1 };
              return [3, 11];
            case 10:
              try {
                if (devices_1_1 && !devices_1_1.done && (_b = devices_1.return)) _b.call(devices_1);
              } finally {
                if (e_1) throw e_1.error;
              }
              return [
                7
                /*endfinally*/
              ];
            case 11:
              return [2, void 0];
          }
        });
      });
    };
    exports.findBySerialNumber = findBySerialNumber;
    var webusb = new webusb_1.WebUSB();
    exports.webusb = webusb;
    var usb_1 = require_usb();
    Object.defineProperty(exports, "Device", { enumerable: true, get: function() {
      return usb_1.Device;
    } });
    Object.defineProperty(exports, "Transfer", { enumerable: true, get: function() {
      return usb_1.Transfer;
    } });
    Object.defineProperty(exports, "getDeviceList", { enumerable: true, get: function() {
      return usb_1.getDeviceList;
    } });
    Object.defineProperty(exports, "useUsbDkBackend", { enumerable: true, get: function() {
      return usb_1.useUsbDkBackend;
    } });
    Object.defineProperty(exports, "LibUSBException", { enumerable: true, get: function() {
      return usb_1.LibUSBException;
    } });
    __exportStar(require_capability(), exports);
    __exportStar(require_descriptors(), exports);
    __exportStar(require_endpoint(), exports);
    __exportStar(require_interface(), exports);
    __exportStar(require_webusb(), exports);
    __exportStar(require_webusb_device(), exports);
  }
});

// node_modules/.pnpm/@ledgerhq+hw-transport-node-hid@6.29.9/node_modules/@ledgerhq/hw-transport-node-hid/lib-es/TransportNodeHid.js
var import_node_hid2 = __toESM(require_nodehid());

// node_modules/.pnpm/@ledgerhq+hw-transport-node-hid-noevents@6.30.9/node_modules/@ledgerhq/hw-transport-node-hid-noevents/lib-es/TransportNodeHid.js
var import_node_hid = __toESM(require_nodehid());

// node_modules/.pnpm/@ledgerhq+hw-transport@6.31.8/node_modules/@ledgerhq/hw-transport/lib-es/Transport.js
var import_events = __toESM(require_events());

// node_modules/.pnpm/@ledgerhq+errors@6.23.0/node_modules/@ledgerhq/errors/lib-es/helpers.js
var errorClasses = {};
var deserializers = {};
var addCustomErrorDeserializer = (name, deserializer) => {
  deserializers[name] = deserializer;
};
var createCustomErrorClass = (name) => {
  class CustomErrorClass extends Error {
    constructor(message, fields, options) {
      super(message || name, options);
      __publicField(this, "cause");
      Object.setPrototypeOf(this, CustomErrorClass.prototype);
      this.name = name;
      if (fields) {
        for (const k in fields) {
          this[k] = fields[k];
        }
      }
      if (options && isObject(options) && "cause" in options && !this.cause) {
        const cause = options.cause;
        this.cause = cause;
        if ("stack" in cause) {
          this.stack = this.stack + "\nCAUSE: " + cause.stack;
        }
      }
    }
  }
  errorClasses[name] = CustomErrorClass;
  return CustomErrorClass;
};
function isObject(value) {
  return typeof value === "object";
}

// node_modules/.pnpm/@ledgerhq+errors@6.23.0/node_modules/@ledgerhq/errors/lib-es/index.js
var AccountNameRequiredError = createCustomErrorClass("AccountNameRequired");
var AccountNotSupported = createCustomErrorClass("AccountNotSupported");
var AccountAwaitingSendPendingOperations = createCustomErrorClass("AccountAwaitingSendPendingOperations");
var AmountRequired = createCustomErrorClass("AmountRequired");
var BluetoothRequired = createCustomErrorClass("BluetoothRequired");
var BtcUnmatchedApp = createCustomErrorClass("BtcUnmatchedApp");
var CantOpenDevice = createCustomErrorClass("CantOpenDevice");
var CashAddrNotSupported = createCustomErrorClass("CashAddrNotSupported");
var ClaimRewardsFeesWarning = createCustomErrorClass("ClaimRewardsFeesWarning");
var CurrencyNotSupported = createCustomErrorClass("CurrencyNotSupported");
var DeviceAppVerifyNotSupported = createCustomErrorClass("DeviceAppVerifyNotSupported");
var DeviceGenuineSocketEarlyClose = createCustomErrorClass("DeviceGenuineSocketEarlyClose");
var DeviceNotGenuineError = createCustomErrorClass("DeviceNotGenuine");
var DeviceOnDashboardExpected = createCustomErrorClass("DeviceOnDashboardExpected");
var DeviceOnDashboardUnexpected = createCustomErrorClass("DeviceOnDashboardUnexpected");
var DeviceInOSUExpected = createCustomErrorClass("DeviceInOSUExpected");
var DeviceHalted = createCustomErrorClass("DeviceHalted");
var DeviceNameInvalid = createCustomErrorClass("DeviceNameInvalid");
var DeviceSocketFail = createCustomErrorClass("DeviceSocketFail");
var DeviceSocketNoBulkStatus = createCustomErrorClass("DeviceSocketNoBulkStatus");
var DeviceNeedsRestart = createCustomErrorClass("DeviceSocketNoBulkStatus");
var UnresponsiveDeviceError = createCustomErrorClass("UnresponsiveDeviceError");
var DisconnectedDevice = createCustomErrorClass("DisconnectedDevice");
var DisconnectedDeviceDuringOperation = createCustomErrorClass("DisconnectedDeviceDuringOperation");
var DeviceExtractOnboardingStateError = createCustomErrorClass("DeviceExtractOnboardingStateError");
var DeviceOnboardingStatePollingError = createCustomErrorClass("DeviceOnboardingStatePollingError");
var EnpointConfigError = createCustomErrorClass("EnpointConfig");
var EthAppPleaseEnableContractData = createCustomErrorClass("EthAppPleaseEnableContractData");
var FeeEstimationFailed = createCustomErrorClass("FeeEstimationFailed");
var FirmwareNotRecognized = createCustomErrorClass("FirmwareNotRecognized");
var HardResetFail = createCustomErrorClass("HardResetFail");
var InvalidXRPTag = createCustomErrorClass("InvalidXRPTag");
var InvalidAddress = createCustomErrorClass("InvalidAddress");
var InvalidNonce = createCustomErrorClass("InvalidNonce");
var InvalidAddressBecauseDestinationIsAlsoSource = createCustomErrorClass("InvalidAddressBecauseDestinationIsAlsoSource");
var LatestMCUInstalledError = createCustomErrorClass("LatestMCUInstalledError");
var LatestFirmwareVersionRequired = createCustomErrorClass("LatestFirmwareVersionRequired");
var UnknownMCU = createCustomErrorClass("UnknownMCU");
var LedgerAPIError = createCustomErrorClass("LedgerAPIError");
var LedgerAPIErrorWithMessage = createCustomErrorClass("LedgerAPIErrorWithMessage");
var LedgerAPINotAvailable = createCustomErrorClass("LedgerAPINotAvailable");
var ManagerAppAlreadyInstalledError = createCustomErrorClass("ManagerAppAlreadyInstalled");
var ManagerAppRelyOnBTCError = createCustomErrorClass("ManagerAppRelyOnBTC");
var ManagerAppDepInstallRequired = createCustomErrorClass("ManagerAppDepInstallRequired");
var ManagerAppDepUninstallRequired = createCustomErrorClass("ManagerAppDepUninstallRequired");
var ManagerDeviceLockedError = createCustomErrorClass("ManagerDeviceLocked");
var ManagerFirmwareNotEnoughSpaceError = createCustomErrorClass("ManagerFirmwareNotEnoughSpace");
var ManagerNotEnoughSpaceError = createCustomErrorClass("ManagerNotEnoughSpace");
var ManagerUninstallBTCDep = createCustomErrorClass("ManagerUninstallBTCDep");
var NetworkDown = createCustomErrorClass("NetworkDown");
var NetworkError = createCustomErrorClass("NetworkError");
var NoAddressesFound = createCustomErrorClass("NoAddressesFound");
var NotEnoughBalance = createCustomErrorClass("NotEnoughBalance");
var NotEnoughBalanceFees = createCustomErrorClass("NotEnoughBalanceFees");
var NotEnoughBalanceSwap = createCustomErrorClass("NotEnoughBalanceSwap");
var NotEnoughBalanceToDelegate = createCustomErrorClass("NotEnoughBalanceToDelegate");
var UnstakeNotEnoughStakedBalanceLeft = createCustomErrorClass("UnstakeNotEnoughStakedBalanceLeft");
var RestakeNotEnoughStakedBalanceLeft = createCustomErrorClass("RestakeNotEnoughStakedBalanceLeft");
var NotEnoughToRestake = createCustomErrorClass("NotEnoughToRestake");
var NotEnoughToUnstake = createCustomErrorClass("NotEnoughToUnstake");
var NotEnoughBalanceInParentAccount = createCustomErrorClass("NotEnoughBalanceInParentAccount");
var NotEnoughSpendableBalance = createCustomErrorClass("NotEnoughSpendableBalance");
var NotEnoughBalanceBecauseDestinationNotCreated = createCustomErrorClass("NotEnoughBalanceBecauseDestinationNotCreated");
var NotEnoughToStake = createCustomErrorClass("NotEnoughToStake");
var NoAccessToCamera = createCustomErrorClass("NoAccessToCamera");
var NotEnoughGas = createCustomErrorClass("NotEnoughGas");
var NotEnoughGasSwap = createCustomErrorClass("NotEnoughGasSwap");
var TronEmptyAccount = createCustomErrorClass("TronEmptyAccount");
var MaybeKeepTronAccountAlive = createCustomErrorClass("MaybeKeepTronAccountAlive");
var NotSupportedLegacyAddress = createCustomErrorClass("NotSupportedLegacyAddress");
var GasLessThanEstimate = createCustomErrorClass("GasLessThanEstimate");
var PriorityFeeTooLow = createCustomErrorClass("PriorityFeeTooLow");
var PriorityFeeTooHigh = createCustomErrorClass("PriorityFeeTooHigh");
var PriorityFeeHigherThanMaxFee = createCustomErrorClass("PriorityFeeHigherThanMaxFee");
var MaxFeeTooLow = createCustomErrorClass("MaxFeeTooLow");
var PasswordsDontMatchError = createCustomErrorClass("PasswordsDontMatch");
var PasswordIncorrectError = createCustomErrorClass("PasswordIncorrect");
var RecommendSubAccountsToEmpty = createCustomErrorClass("RecommendSubAccountsToEmpty");
var RecommendUndelegation = createCustomErrorClass("RecommendUndelegation");
var TimeoutTagged = createCustomErrorClass("TimeoutTagged");
var UnexpectedBootloader = createCustomErrorClass("UnexpectedBootloader");
var MCUNotGenuineToDashboard = createCustomErrorClass("MCUNotGenuineToDashboard");
var RecipientRequired = createCustomErrorClass("RecipientRequired");
var UnavailableTezosOriginatedAccountReceive = createCustomErrorClass("UnavailableTezosOriginatedAccountReceive");
var UnavailableTezosOriginatedAccountSend = createCustomErrorClass("UnavailableTezosOriginatedAccountSend");
var UpdateFetchFileFail = createCustomErrorClass("UpdateFetchFileFail");
var UpdateIncorrectHash = createCustomErrorClass("UpdateIncorrectHash");
var UpdateIncorrectSig = createCustomErrorClass("UpdateIncorrectSig");
var UpdateYourApp = createCustomErrorClass("UpdateYourApp");
var UserRefusedDeviceNameChange = createCustomErrorClass("UserRefusedDeviceNameChange");
var UserRefusedAddress = createCustomErrorClass("UserRefusedAddress");
var UserRefusedFirmwareUpdate = createCustomErrorClass("UserRefusedFirmwareUpdate");
var UserRefusedAllowManager = createCustomErrorClass("UserRefusedAllowManager");
var UserRefusedOnDevice = createCustomErrorClass("UserRefusedOnDevice");
var PinNotSet = createCustomErrorClass("PinNotSet");
var ExpertModeRequired = createCustomErrorClass("ExpertModeRequired");
var TransportOpenUserCancelled = createCustomErrorClass("TransportOpenUserCancelled");
var TransportInterfaceNotAvailable = createCustomErrorClass("TransportInterfaceNotAvailable");
var TransportRaceCondition = createCustomErrorClass("TransportRaceCondition");
var TransportWebUSBGestureRequired = createCustomErrorClass("TransportWebUSBGestureRequired");
var TransactionHasBeenValidatedError = createCustomErrorClass("TransactionHasBeenValidatedError");
var TransportExchangeTimeoutError = createCustomErrorClass("TransportExchangeTimeoutError");
var DeviceShouldStayInApp = createCustomErrorClass("DeviceShouldStayInApp");
var WebsocketConnectionError = createCustomErrorClass("WebsocketConnectionError");
var WebsocketConnectionFailed = createCustomErrorClass("WebsocketConnectionFailed");
var WrongDeviceForAccount = createCustomErrorClass("WrongDeviceForAccount");
var WrongDeviceForAccountPayout = createCustomErrorClass("WrongDeviceForAccountPayout");
var MissingSwapPayloadParamaters = createCustomErrorClass("MissingSwapPayloadParamaters");
var WrongDeviceForAccountRefund = createCustomErrorClass("WrongDeviceForAccountRefund");
var WrongAppForCurrency = createCustomErrorClass("WrongAppForCurrency");
var ETHAddressNonEIP = createCustomErrorClass("ETHAddressNonEIP");
var CantScanQRCode = createCustomErrorClass("CantScanQRCode");
var FeeNotLoaded = createCustomErrorClass("FeeNotLoaded");
var FeeNotLoadedSwap = createCustomErrorClass("FeeNotLoadedSwap");
var FeeRequired = createCustomErrorClass("FeeRequired");
var FeeTooHigh = createCustomErrorClass("FeeTooHigh");
var PendingOperation = createCustomErrorClass("PendingOperation");
var SyncError = createCustomErrorClass("SyncError");
var PairingFailed = createCustomErrorClass("PairingFailed");
var PeerRemovedPairing = createCustomErrorClass("PeerRemovedPairing");
var GenuineCheckFailed = createCustomErrorClass("GenuineCheckFailed");
var LedgerAPI4xx = createCustomErrorClass("LedgerAPI4xx");
var LedgerAPI5xx = createCustomErrorClass("LedgerAPI5xx");
var FirmwareOrAppUpdateRequired = createCustomErrorClass("FirmwareOrAppUpdateRequired");
var ReplacementTransactionUnderpriced = createCustomErrorClass("ReplacementTransactionUnderpriced");
var OpReturnDataSizeLimit = createCustomErrorClass("OpReturnSizeLimit");
var DustLimit = createCustomErrorClass("DustLimit");
var LanguageNotFound = createCustomErrorClass("LanguageNotFound");
var NoDBPathGiven = createCustomErrorClass("NoDBPathGiven");
var DBWrongPassword = createCustomErrorClass("DBWrongPassword");
var DBNotReset = createCustomErrorClass("DBNotReset");
var SequenceNumberError = createCustomErrorClass("SequenceNumberError");
var DisabledTransactionBroadcastError = createCustomErrorClass("DisabledTransactionBroadcastError");
var HwTransportErrorType;
(function(HwTransportErrorType2) {
  HwTransportErrorType2["Unknown"] = "Unknown";
  HwTransportErrorType2["LocationServicesDisabled"] = "LocationServicesDisabled";
  HwTransportErrorType2["LocationServicesUnauthorized"] = "LocationServicesUnauthorized";
  HwTransportErrorType2["BluetoothScanStartFailed"] = "BluetoothScanStartFailed";
})(HwTransportErrorType || (HwTransportErrorType = {}));
var TransportError = class extends Error {
  constructor(message, id2) {
    const name = "TransportError";
    super(message || name);
    __publicField(this, "id");
    this.name = name;
    this.message = message;
    this.stack = new Error(message).stack;
    this.id = id2;
  }
};
addCustomErrorDeserializer("TransportError", (e) => new TransportError(e.message, e.id));
var StatusCodes = {
  ACCESS_CONDITION_NOT_FULFILLED: 38916,
  ALGORITHM_NOT_SUPPORTED: 38020,
  CLA_NOT_SUPPORTED: 28160,
  CODE_BLOCKED: 38976,
  CODE_NOT_INITIALIZED: 38914,
  COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 27009,
  CONDITIONS_OF_USE_NOT_SATISFIED: 27013,
  CONTRADICTION_INVALIDATION: 38928,
  CONTRADICTION_SECRET_CODE_STATUS: 38920,
  DEVICE_IN_RECOVERY_MODE: 26159,
  CUSTOM_IMAGE_EMPTY: 26158,
  FILE_ALREADY_EXISTS: 27273,
  FILE_NOT_FOUND: 37892,
  GP_AUTH_FAILED: 25344,
  HALTED: 28586,
  INCONSISTENT_FILE: 37896,
  INCORRECT_DATA: 27264,
  INCORRECT_LENGTH: 26368,
  INCORRECT_P1_P2: 27392,
  INS_NOT_SUPPORTED: 27904,
  DEVICE_NOT_ONBOARDED: 27911,
  DEVICE_NOT_ONBOARDED_2: 26129,
  INVALID_KCV: 38021,
  INVALID_OFFSET: 37890,
  LICENSING: 28482,
  LOCKED_DEVICE: 21781,
  MAX_VALUE_REACHED: 38992,
  MEMORY_PROBLEM: 37440,
  MISSING_CRITICAL_PARAMETER: 26624,
  NO_EF_SELECTED: 37888,
  NOT_ENOUGH_MEMORY_SPACE: 27268,
  OK: 36864,
  PIN_REMAINING_ATTEMPTS: 25536,
  REFERENCED_DATA_NOT_FOUND: 27272,
  SECURITY_STATUS_NOT_SATISFIED: 27010,
  TECHNICAL_PROBLEM: 28416,
  UNKNOWN_APDU: 27906,
  USER_REFUSED_ON_DEVICE: 21761,
  NOT_ENOUGH_SPACE: 20738,
  APP_NOT_FOUND_OR_INVALID_CONTEXT: 20771,
  INVALID_APP_NAME_LENGTH: 26378,
  GEN_AES_KEY_FAILED: 21529,
  INTERNAL_CRYPTO_OPERATION_FAILED: 21530,
  INTERNAL_COMPUTE_AES_CMAC_FAILED: 21531,
  ENCRYPT_APP_STORAGE_FAILED: 21532,
  INVALID_BACKUP_STATE: 26178,
  PIN_NOT_SET: 21762,
  INVALID_BACKUP_LENGTH: 26419,
  INVALID_RESTORE_STATE: 26179,
  INVALID_CHUNK_LENGTH: 26420,
  INVALID_BACKUP_HEADER: 26698,
  // Not documented:
  TRUSTCHAIN_WRONG_SEED: 45063
};
function getAltStatusMessage(code) {
  switch (code) {
    // improve text of most common errors
    case 26368:
      return "Incorrect length";
    case 26624:
      return "Missing critical parameter";
    case 27010:
      return "Security not satisfied (dongle locked or have invalid access rights)";
    case 27013:
      return "Condition of use not satisfied (denied by the user?)";
    case 27264:
      return "Invalid data received";
    case 27392:
      return "Invalid parameter received";
    case 21781:
      return "Locked device";
  }
  if (28416 <= code && code <= 28671) {
    return "Internal error, please report";
  }
}
var TransportStatusError = class _TransportStatusError extends Error {
  /**
   * @param statusCode The error status code coming from a Transport implementation
   * @param options containing:
   *  - canBeMappedToChildError: enable the mapping of TransportStatusError to an error extending/inheriting from it
   *  . Ex: LockedDeviceError. Default to true.
   */
  constructor(statusCode, { canBeMappedToChildError = true } = {}) {
    const statusText = Object.keys(StatusCodes).find((k) => StatusCodes[k] === statusCode) || "UNKNOWN_ERROR";
    const smsg = getAltStatusMessage(statusCode) || statusText;
    const statusCodeStr = statusCode.toString(16);
    const message = `Ledger device: ${smsg} (0x${statusCodeStr})`;
    super(message);
    __publicField(this, "statusCode");
    __publicField(this, "statusText");
    this.name = "TransportStatusError";
    this.statusCode = statusCode;
    this.statusText = statusText;
    Object.setPrototypeOf(this, _TransportStatusError.prototype);
    if (canBeMappedToChildError && statusCode === StatusCodes.LOCKED_DEVICE) {
      return new LockedDeviceError(message);
    }
  }
};
var LockedDeviceError = class _LockedDeviceError extends TransportStatusError {
  constructor(message) {
    super(StatusCodes.LOCKED_DEVICE, { canBeMappedToChildError: false });
    if (message) {
      this.message = message;
    }
    this.name = "LockedDeviceError";
    Object.setPrototypeOf(this, _LockedDeviceError.prototype);
  }
};
addCustomErrorDeserializer("TransportStatusError", (e) => new TransportStatusError(e.statusCode));

// node_modules/.pnpm/@ledgerhq+logs@6.13.0/node_modules/@ledgerhq/logs/lib-es/index.js
var id = 0;
var subscribers = [];
var log = (type, message, data) => {
  const obj = {
    type,
    id: String(++id),
    date: /* @__PURE__ */ new Date()
  };
  if (message)
    obj.message = message;
  if (data)
    obj.data = data;
  dispatch(obj);
};
var trace = ({ type, message, data, context }) => {
  const obj = {
    type,
    id: String(++id),
    date: /* @__PURE__ */ new Date()
  };
  if (message)
    obj.message = message;
  if (data)
    obj.data = data;
  if (context)
    obj.context = context;
  dispatch(obj);
};
var LocalTracer = class _LocalTracer {
  constructor(type, context) {
    __publicField(this, "type");
    __publicField(this, "context");
    this.type = type;
    this.context = context;
  }
  trace(message, data) {
    trace({
      type: this.type,
      message,
      data,
      context: this.context
    });
  }
  getContext() {
    return this.context;
  }
  setContext(context) {
    this.context = context;
  }
  updateContext(contextToAdd) {
    this.context = { ...this.context, ...contextToAdd };
  }
  getType() {
    return this.type;
  }
  setType(type) {
    this.type = type;
  }
  /**
   * Create a new instance of the LocalTracer with an updated `type`
   *
   * It does not mutate the calling instance, but returns a new LocalTracer,
   * following a simple builder pattern.
   */
  withType(type) {
    return new _LocalTracer(type, this.context);
  }
  /**
   * Create a new instance of the LocalTracer with a new `context`
   *
   * It does not mutate the calling instance, but returns a new LocalTracer,
   * following a simple builder pattern.
   *
   * @param context A TraceContext, that can undefined to reset the context
   */
  withContext(context) {
    return new _LocalTracer(this.type, context);
  }
  /**
   * Create a new instance of the LocalTracer with an updated `context`,
   * on which an additional context is merged with the existing one.
   *
   * It does not mutate the calling instance, but returns a new LocalTracer,
   * following a simple builder pattern.
   */
  withUpdatedContext(contextToAdd) {
    return new _LocalTracer(this.type, { ...this.context, ...contextToAdd });
  }
};
var listen = (cb) => {
  subscribers.push(cb);
  return () => {
    const i = subscribers.indexOf(cb);
    if (i !== -1) {
      subscribers[i] = subscribers[subscribers.length - 1];
      subscribers.pop();
    }
  };
};
function dispatch(log2) {
  for (let i = 0; i < subscribers.length; i++) {
    try {
      subscribers[i](log2);
    } catch (e) {
      console.error(e);
    }
  }
}
if (typeof window !== "undefined") {
  window.__ledgerLogsListen = listen;
}

// node_modules/.pnpm/@ledgerhq+hw-transport@6.31.8/node_modules/@ledgerhq/hw-transport/lib-es/Transport.js
var DEFAULT_LOG_TYPE = "transport";
var Transport = class {
  constructor({ context, logType } = {}) {
    __publicField(this, "exchangeTimeout", 3e4);
    __publicField(this, "unresponsiveTimeout", 15e3);
    __publicField(this, "deviceModel", null);
    __publicField(this, "tracer");
    __publicField(this, "_events", new import_events.default());
    /**
     * Send data to the device using the higher level API.
     *
     * @param {number} cla - The instruction class for the command.
     * @param {number} ins - The instruction code for the command.
     * @param {number} p1 - The first parameter for the instruction.
     * @param {number} p2 - The second parameter for the instruction.
     * @param {Buffer} data - The data to be sent. Defaults to an empty buffer.
     * @param {Array<number>} statusList - A list of acceptable status codes for the response. Defaults to [StatusCodes.OK].
     * @param {Object} options - Contains optional options for the exchange function
     *  - abortTimeoutMs: stop the send after a given timeout. Another timeout exists
     *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.
     * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.
     */
    __publicField(this, "send", async (cla, ins, p1, p2, data = Buffer.alloc(0), statusList = [StatusCodes.OK], { abortTimeoutMs } = {}) => {
      const tracer = this.tracer.withUpdatedContext({ function: "send" });
      if (data.length >= 256) {
        tracer.trace("data.length exceeded 256 bytes limit", { dataLength: data.length });
        throw new TransportError("data.length exceed 256 bytes limit. Got: " + data.length, "DataLengthTooBig");
      }
      tracer.trace("Starting an exchange", { abortTimeoutMs });
      const response = await this.exchange(
        // The size of the data is added in 1 byte just before `data`
        Buffer.concat([Buffer.from([cla, ins, p1, p2]), Buffer.from([data.length]), data]),
        { abortTimeoutMs }
      );
      tracer.trace("Received response from exchange");
      const sw = response.readUInt16BE(response.length - 2);
      if (!statusList.some((s) => s === sw)) {
        throw new TransportStatusError(sw);
      }
      return response;
    });
    // Blocks other exchange to happen concurrently
    __publicField(this, "exchangeBusyPromise");
    __publicField(this, "_appAPIlock", null);
    this.tracer = new LocalTracer(logType ?? DEFAULT_LOG_TYPE, context);
  }
  /**
   * Send data to the device using a low level API.
   * It's recommended to use the "send" method for a higher level API.
   * @param {Buffer} apdu - The data to send.
   * @param {Object} options - Contains optional options for the exchange function
   *  - abortTimeoutMs: stop the exchange after a given timeout. Another timeout exists
   *    to detect unresponsive device (see `unresponsiveTimeout`). This timeout aborts the exchange.
   * @returns {Promise<Buffer>} A promise that resolves with the response data from the device.
   */
  exchange(_apdu, { abortTimeoutMs: _abortTimeoutMs } = {}) {
    throw new Error("exchange not implemented");
  }
  /**
   * Send apdus in batch to the device using a low level API.
   * The default implementation is to call exchange for each apdu.
   * @param {Array<Buffer>} apdus - array of apdus to send.
   * @param {Observer<Buffer>} observer - an observer that will receive the response of each apdu.
   * @returns {Subscription} A Subscription object on which you can call ".unsubscribe()" to stop sending apdus.
   */
  exchangeBulk(apdus, observer) {
    let unsubscribed = false;
    const unsubscribe = () => {
      unsubscribed = true;
    };
    const main = async () => {
      if (unsubscribed)
        return;
      for (const apdu of apdus) {
        const r = await this.exchange(apdu);
        if (unsubscribed)
          return;
        const status = r.readUInt16BE(r.length - 2);
        if (status !== StatusCodes.OK) {
          throw new TransportStatusError(status);
        }
        observer.next(r);
      }
    };
    main().then(() => !unsubscribed && observer.complete(), (e) => !unsubscribed && observer.error(e));
    return { unsubscribe };
  }
  /**
   * Set the "scramble key" for the next data exchanges with the device.
   * Each app can have a different scramble key and it is set internally during instantiation.
   * @param {string} key - The scramble key to set.
   * deprecated This method is no longer needed for modern transports and should be migrated away from.
   * no @ before deprecated as it breaks documentationjs on version 14.0.2
   * https://github.com/documentationjs/documentation/issues/1596
   */
  setScrambleKey(_key) {
  }
  /**
   * Close the connection with the device.
   *
   * Note: for certain transports (hw-transport-node-hid-singleton for ex), once the promise resolved,
   * the transport instance is actually still cached, and the device is disconnected only after a defined timeout.
   * But for the consumer of the Transport, this does not matter and it can consider the transport to be closed.
   *
   * @returns {Promise<void>} A promise that resolves when the transport is closed.
   */
  close() {
    return Promise.resolve();
  }
  /**
   * Listen for an event on the transport instance.
   * Transport implementations may have specific events. Common events include:
   * "disconnect" : triggered when the transport is disconnected.
   * @param {string} eventName - The name of the event to listen for.
   * @param {(...args: Array<any>) => any} cb - The callback function to be invoked when the event occurs.
   */
  on(eventName, cb) {
    this._events.on(eventName, cb);
  }
  /**
   * Stop listening to an event on an instance of transport.
   */
  off(eventName, cb) {
    this._events.removeListener(eventName, cb);
  }
  emit(event, ...args) {
    this._events.emit(event, ...args);
  }
  /**
   * Enable or not logs of the binary exchange
   */
  setDebugMode() {
    console.warn("setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.");
  }
  /**
   * Set a timeout (in milliseconds) for the exchange call. Only some transport might implement it. (e.g. U2F)
   */
  setExchangeTimeout(exchangeTimeout) {
    this.exchangeTimeout = exchangeTimeout;
  }
  /**
   * Define the delay before emitting "unresponsive" on an exchange that does not respond
   */
  setExchangeUnresponsiveTimeout(unresponsiveTimeout) {
    this.unresponsiveTimeout = unresponsiveTimeout;
  }
  /**
   * create() allows to open the first descriptor available or
   * throw if there is none or if timeout is reached.
   * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)
   * @example
  TransportFoo.create().then(transport => ...)
   */
  static create(openTimeout = 3e3, listenTimeout) {
    return new Promise((resolve, reject) => {
      let found = false;
      const sub = this.listen({
        next: (e) => {
          found = true;
          if (sub)
            sub.unsubscribe();
          if (listenTimeoutId)
            clearTimeout(listenTimeoutId);
          this.open(e.descriptor, openTimeout).then(resolve, reject);
        },
        error: (e) => {
          if (listenTimeoutId)
            clearTimeout(listenTimeoutId);
          reject(e);
        },
        complete: () => {
          if (listenTimeoutId)
            clearTimeout(listenTimeoutId);
          if (!found) {
            reject(new TransportError(this.ErrorMessage_NoDeviceFound, "NoDeviceFound"));
          }
        }
      });
      const listenTimeoutId = listenTimeout ? setTimeout(() => {
        sub.unsubscribe();
        reject(new TransportError(this.ErrorMessage_ListenTimeout, "ListenTimeout"));
      }, listenTimeout) : null;
    });
  }
  /**
   * Wrapper to make an exchange "atomic" (blocking any other exchange)
   *
   * It also handles "unresponsiveness" by emitting "unresponsive" and "responsive" events.
   *
   * @param f The exchange job, using the transport to run
   * @returns a Promise resolving with the output of the given job
   */
  async exchangeAtomicImpl(f) {
    const tracer = this.tracer.withUpdatedContext({
      function: "exchangeAtomicImpl",
      unresponsiveTimeout: this.unresponsiveTimeout
    });
    if (this.exchangeBusyPromise) {
      tracer.trace("Atomic exchange is already busy");
      throw new TransportRaceCondition("An action was already pending on the Ledger device. Please deny or reconnect.");
    }
    let resolveBusy;
    const busyPromise = new Promise((r) => {
      resolveBusy = r;
    });
    this.exchangeBusyPromise = busyPromise;
    let unresponsiveReached = false;
    const timeout = setTimeout(() => {
      tracer.trace(`Timeout reached, emitting Transport event "unresponsive"`, {
        unresponsiveTimeout: this.unresponsiveTimeout
      });
      unresponsiveReached = true;
      this.emit("unresponsive");
    }, this.unresponsiveTimeout);
    try {
      const res = await f();
      if (unresponsiveReached) {
        tracer.trace("Device was unresponsive, emitting responsive");
        this.emit("responsive");
      }
      return res;
    } finally {
      tracer.trace("Finalize, clearing busy guard");
      clearTimeout(timeout);
      if (resolveBusy)
        resolveBusy();
      this.exchangeBusyPromise = null;
    }
  }
  decorateAppAPIMethods(self, methods, scrambleKey) {
    for (const methodName of methods) {
      self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);
    }
  }
  decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {
    return async (...args) => {
      const { _appAPIlock } = this;
      if (_appAPIlock) {
        return Promise.reject(new TransportError("Ledger Device is busy (lock " + _appAPIlock + ")", "TransportLocked"));
      }
      try {
        this._appAPIlock = methodName;
        this.setScrambleKey(scrambleKey);
        return await f.apply(ctx, args);
      } finally {
        this._appAPIlock = null;
      }
    };
  }
  /**
   * Sets the context used by the logging/tracing mechanism
   *
   * Useful when re-using (cached) the same Transport instance,
   * but with a new tracing context.
   *
   * @param context A TraceContext, that can undefined to reset the context
   */
  setTraceContext(context) {
    this.tracer = this.tracer.withContext(context);
  }
  /**
   * Updates the context used by the logging/tracing mechanism
   *
   * The update only overrides the key-value that are already defined in the current context.
   *
   * @param contextToAdd A TraceContext that will be added to the current context
   */
  updateTraceContext(contextToAdd) {
    this.tracer.updateContext(contextToAdd);
  }
  /**
   * Gets the tracing context of the transport instance
   */
  getTraceContext() {
    return this.tracer.getContext();
  }
};
/**
 * Check if the transport is supported on the current platform/browser.
 * @returns {Promise<boolean>} A promise that resolves with a boolean indicating support.
 */
__publicField(Transport, "isSupported");
/**
 * List all available descriptors for the transport.
 * For a better granularity, checkout `listen()`.
 *
 * @returns {Promise<Array<any>>} A promise that resolves with an array of descriptors.
 * @example
 * TransportFoo.list().then(descriptors => ...)
 */
__publicField(Transport, "list");
/**
 * Listen for device events for the transport. The method takes an observer of DescriptorEvent and returns a Subscription.
 * A DescriptorEvent is an object containing a "descriptor" and a "type" field. The "type" field can be "add" or "remove", and the "descriptor" field can be passed to the "open" method.
 * The "listen" method will first emit all currently connected devices and then will emit events as they occur, such as when a USB device is plugged in or a Bluetooth device becomes discoverable.
 * @param {Observer<DescriptorEvent<any>>} observer - An object with "next", "error", and "complete" functions, following the observer pattern.
 * @returns {Subscription} A Subscription object on which you can call ".unsubscribe()" to stop listening to descriptors.
 * @example
const sub = TransportFoo.listen({
next: e => {
  if (e.type==="add") {
    sub.unsubscribe();
    const transport = await TransportFoo.open(e.descriptor);
    ...
  }
},
error: error => {},
complete: () => {}
})
 */
__publicField(Transport, "listen");
/**
 * Attempt to create a Transport instance with a specific descriptor.
 * @param {any} descriptor - The descriptor to open the transport with.
 * @param {number} timeout - An optional timeout for the transport connection.
 * @param {TraceContext} context Optional tracing/log context
 * @returns {Promise<Transport>} A promise that resolves with a Transport instance.
 * @example
TransportFoo.open(descriptor).then(transport => ...)
 */
__publicField(Transport, "open");
__publicField(Transport, "ErrorMessage_ListenTimeout", "No Ledger device found (timeout)");
__publicField(Transport, "ErrorMessage_NoDeviceFound", "No Ledger device found");

// node_modules/.pnpm/@ledgerhq+devices@8.4.8/node_modules/@ledgerhq/devices/lib-es/index.js
var import_semver = __toESM(require_semver2());
var DeviceModelId;
(function(DeviceModelId2) {
  DeviceModelId2["blue"] = "blue";
  DeviceModelId2["nanoS"] = "nanoS";
  DeviceModelId2["nanoSP"] = "nanoSP";
  DeviceModelId2["nanoX"] = "nanoX";
  DeviceModelId2["stax"] = "stax";
  DeviceModelId2["europa"] = "europa";
})(DeviceModelId || (DeviceModelId = {}));
var devices = {
  [DeviceModelId.blue]: {
    id: DeviceModelId.blue,
    productName: "Ledger Blue",
    productIdMM: 0,
    legacyUsbProductId: 0,
    usbOnly: true,
    memorySize: 480 * 1024,
    masks: [822083584, 822149120],
    getBlockSize: (_firwareVersion) => 4 * 1024
  },
  [DeviceModelId.nanoS]: {
    id: DeviceModelId.nanoS,
    productName: "Ledger Nano S",
    productIdMM: 16,
    legacyUsbProductId: 1,
    usbOnly: true,
    memorySize: 320 * 1024,
    masks: [823132160],
    getBlockSize: (firmwareVersion) => import_semver.default.lt(import_semver.default.coerce(firmwareVersion) ?? "", "2.0.0") ? 4 * 1024 : 2 * 1024
  },
  [DeviceModelId.nanoX]: {
    id: DeviceModelId.nanoX,
    productName: "Ledger Nano X",
    productIdMM: 64,
    legacyUsbProductId: 4,
    usbOnly: false,
    memorySize: 2 * 1024 * 1024,
    masks: [855638016],
    getBlockSize: (_firwareVersion) => 4 * 1024,
    bluetoothSpec: [
      {
        serviceUuid: "13d63400-2c97-0004-0000-4c6564676572",
        notifyUuid: "13d63400-2c97-0004-0001-4c6564676572",
        writeUuid: "13d63400-2c97-0004-0002-4c6564676572",
        writeCmdUuid: "13d63400-2c97-0004-0003-4c6564676572"
      }
    ]
  },
  [DeviceModelId.nanoSP]: {
    id: DeviceModelId.nanoSP,
    productName: "Ledger Nano S Plus",
    productIdMM: 80,
    legacyUsbProductId: 5,
    usbOnly: true,
    memorySize: 1533 * 1024,
    masks: [856686592],
    getBlockSize: (_firmwareVersion) => 32
  },
  [DeviceModelId.stax]: {
    id: DeviceModelId.stax,
    productName: "Ledger Stax",
    productIdMM: 96,
    legacyUsbProductId: 6,
    usbOnly: false,
    memorySize: 1533 * 1024,
    masks: [857735168],
    getBlockSize: (_firmwareVersion) => 32,
    bluetoothSpec: [
      {
        serviceUuid: "13d63400-2c97-6004-0000-4c6564676572",
        notifyUuid: "13d63400-2c97-6004-0001-4c6564676572",
        writeUuid: "13d63400-2c97-6004-0002-4c6564676572",
        writeCmdUuid: "13d63400-2c97-6004-0003-4c6564676572"
      }
    ]
  },
  [DeviceModelId.europa]: {
    id: DeviceModelId.europa,
    productName: "Ledger Flex",
    productIdMM: 112,
    legacyUsbProductId: 7,
    usbOnly: false,
    memorySize: 1533 * 1024,
    masks: [858783744],
    getBlockSize: (_firmwareVersion) => 32,
    bluetoothSpec: [
      {
        serviceUuid: "13d63400-2c97-3004-0000-4c6564676572",
        notifyUuid: "13d63400-2c97-3004-0001-4c6564676572",
        writeUuid: "13d63400-2c97-3004-0002-4c6564676572",
        writeCmdUuid: "13d63400-2c97-3004-0003-4c6564676572"
      }
    ]
  }
};
var productMap = {
  Blue: DeviceModelId.blue,
  "Nano S": DeviceModelId.nanoS,
  "Nano S Plus": DeviceModelId.nanoSP,
  "Nano X": DeviceModelId.nanoX,
  Stax: DeviceModelId.stax,
  Europa: DeviceModelId.europa
};
var devicesList = Object.values(devices);
var ledgerUSBVendorId = 11415;
var identifyUSBProductId = (usbProductId) => {
  const legacy = devicesList.find((d) => d.legacyUsbProductId === usbProductId);
  if (legacy)
    return legacy;
  const mm = usbProductId >> 8;
  const deviceModel = devicesList.find((d) => d.productIdMM === mm);
  return deviceModel;
};
var identifyProductName = (productName) => {
  const deviceModel = devicesList.find((d) => d.id === productMap[productName]);
  return deviceModel;
};
var bluetoothServices = [];
var serviceUuidToInfos = {};
for (const id2 in devices) {
  const deviceModel = devices[id2];
  const { bluetoothSpec } = deviceModel;
  if (bluetoothSpec) {
    for (let i = 0; i < bluetoothSpec.length; i++) {
      const spec = bluetoothSpec[i];
      bluetoothServices.push(spec.serviceUuid);
      serviceUuidToInfos[spec.serviceUuid] = serviceUuidToInfos[spec.serviceUuid.replace(/-/g, "")] = {
        deviceModel,
        ...spec
      };
    }
  }
}

// node_modules/.pnpm/@ledgerhq+devices@8.4.8/node_modules/@ledgerhq/devices/lib-es/hid-framing.js
var Tag = 5;
function asUInt16BE(value) {
  const b = Buffer.alloc(2);
  b.writeUInt16BE(value, 0);
  return b;
}
var initialAcc = {
  data: Buffer.alloc(0),
  dataLength: 0,
  sequence: 0
};
var createHIDframing = (channel, packetSize) => {
  return {
    /**
     * Frames/encodes an APDU message into HID USB packets/frames
     *
     * @param apdu The APDU message to send, in a Buffer containing [cla, ins, p1, p2, data length, data(if not empty)]
     * @returns an array of HID USB frames ready to be sent
     */
    makeBlocks(apdu) {
      let data = Buffer.concat([asUInt16BE(apdu.length), apdu]);
      const blockSize = packetSize - 5;
      const nbBlocks = Math.ceil(data.length / blockSize);
      data = Buffer.concat([data, Buffer.alloc(nbBlocks * blockSize - data.length + 1).fill(0)]);
      const blocks = [];
      for (let i = 0; i < nbBlocks; i++) {
        const head = Buffer.alloc(5);
        head.writeUInt16BE(channel, 0);
        head.writeUInt8(Tag, 2);
        head.writeUInt16BE(i, 3);
        const chunk = data.slice(i * blockSize, (i + 1) * blockSize);
        blocks.push(Buffer.concat([head, chunk]));
      }
      return blocks;
    },
    /**
     * Reduces HID USB packets/frames to one response.
     *
     * @param acc The value resulting from (accumulating) the previous call of reduceResponse.
     *   On first call initialized to `initialAcc`. The accumulator enables handling multi-frames messages.
     * @param chunk Current chunk to reduce into accumulator
     * @returns An accumulator value updated with the current chunk
     */
    reduceResponse(acc, chunk) {
      let { data, dataLength, sequence } = acc || initialAcc;
      if (chunk.readUInt16BE(0) !== channel) {
        throw new TransportError("Invalid channel", "InvalidChannel");
      }
      if (chunk.readUInt8(2) !== Tag) {
        throw new TransportError("Invalid tag", "InvalidTag");
      }
      if (chunk.readUInt16BE(3) !== sequence) {
        throw new TransportError("Invalid sequence", "InvalidSequence");
      }
      if (!acc) {
        dataLength = chunk.readUInt16BE(5);
      }
      sequence++;
      const chunkData = chunk.slice(acc ? 5 : 7);
      data = Buffer.concat([data, chunkData]);
      if (data.length > dataLength) {
        data = data.slice(0, dataLength);
      }
      return {
        data,
        dataLength,
        sequence
      };
    },
    /**
     * Returns the response message that has been reduced from the HID USB frames
     *
     * @param acc The accumulator
     * @returns A Buffer containing the cleaned response message, or null if no response message, or undefined if the
     *   accumulator is incorrect (message length is not valid)
     */
    getReducedResult(acc) {
      if (acc && acc.dataLength === acc.data.length) {
        return acc.data;
      }
    }
  };
};
var hid_framing_default = createHIDframing;

// node_modules/.pnpm/@ledgerhq+hw-transport-node-hid-noevents@6.30.9/node_modules/@ledgerhq/hw-transport-node-hid-noevents/lib-es/TransportNodeHid.js
var filterInterface = (device) => ["win32", "darwin"].includes(process.platform) ? device.usagePage === 65440 : device.interface === 0;
function getDevices() {
  return import_node_hid.default.devices(ledgerUSBVendorId, 0).filter(filterInterface);
}
var _TransportNodeHidNoEvents = class _TransportNodeHidNoEvents extends Transport {
  constructor(device, { context, logType } = {}) {
    super({ context, logType });
    __publicField(this, "device");
    __publicField(this, "deviceModel");
    __publicField(this, "channel", Math.floor(Math.random() * 65535));
    __publicField(this, "packetSize", 64);
    __publicField(this, "disconnected", false);
    __publicField(this, "setDisconnected", () => {
      this.tracer.trace("Setting to disconnected", { alreadyDisconnected: this.disconnected });
      if (!this.disconnected) {
        this.emit("disconnect");
        this.disconnected = true;
      }
    });
    __publicField(this, "writeHID", (content) => {
      const data = [0];
      for (let i = 0; i < content.length; i++) {
        data.push(content[i]);
      }
      try {
        this.device.write(data);
        return Promise.resolve();
      } catch (error) {
        this.tracer.trace(`Received an error during HID write: ${error}`, { error });
        let maybeMappedError = error;
        if (error instanceof Error) {
          maybeMappedError = new DisconnectedDeviceDuringOperation(error.message);
        }
        if (maybeMappedError instanceof DisconnectedDeviceDuringOperation) {
          this.tracer.trace("Disconnected during HID write");
          this.setDisconnected();
        }
        return Promise.reject(maybeMappedError);
      }
    });
    __publicField(this, "readHID", () => new Promise((resolve, reject) => this.device.read((e, res) => {
      if (!res) {
        return reject(new DisconnectedDevice());
      }
      if (e) {
        this.tracer.trace(`Received an error during HID read: ${e}`, { e });
        const maybeMappedError = e && e.message ? new DisconnectedDeviceDuringOperation(e.message) : e;
        if (maybeMappedError instanceof DisconnectedDeviceDuringOperation) {
          this.tracer.trace("Disconnected during HID read");
          this.setDisconnected();
        }
        reject(maybeMappedError);
      } else {
        const buffer = Buffer.from(res);
        resolve(buffer);
      }
    })));
    this.updateTraceContext({ hidChannel: this.channel });
    this.device = device;
    const info = device.getDeviceInfo();
    this.tracer.trace(`Connected to HID device ${!!info}`, { info });
    this.deviceModel = info && info.product ? identifyProductName(info.product) : null;
  }
  /**
   * if path="" is not provided, the library will take the first device
   */
  static open(path) {
    return Promise.resolve().then(() => {
      if (path) {
        return new _TransportNodeHidNoEvents(new import_node_hid.default.HID(path));
      }
      const device = getDevices()[0];
      if (!device)
        throw new TransportError("NoDevice", "NoDevice");
      return new _TransportNodeHidNoEvents(new import_node_hid.default.HID(device.path));
    });
  }
  /**
   * Exchange with the device using APDU protocol.
   *
   * @param apdu
   * @returns a promise of apdu response
   */
  async exchange(apdu) {
    const tracer = this.tracer.withUpdatedContext({
      function: "exchange"
    });
    tracer.trace("Exchanging APDU ...");
    const b = await this.exchangeAtomicImpl(async () => {
      const { channel, packetSize } = this;
      tracer.withType("apdu").trace(`=> ${apdu.toString("hex")}`, { channel, packetSize });
      const framingHelper = hid_framing_default(channel, packetSize);
      const blocks = framingHelper.makeBlocks(apdu);
      for (let i = 0; i < blocks.length; i++) {
        await this.writeHID(blocks[i]);
      }
      let result;
      let acc;
      while (!(result = framingHelper.getReducedResult(acc))) {
        const buffer = await this.readHID();
        acc = framingHelper.reduceResponse(acc, buffer);
      }
      tracer.withType("apdu").trace(`<= ${result.toString("hex")}`, { channel, packetSize });
      return result;
    });
    return b;
  }
  setScrambleKey() {
  }
  /**
   * release the USB device.
   */
  async close() {
    await this.exchangeBusyPromise;
    this.device.close();
  }
};
/**
 *
 */
__publicField(_TransportNodeHidNoEvents, "isSupported", () => Promise.resolve(typeof import_node_hid.default.HID === "function"));
/**
 *
 */
__publicField(_TransportNodeHidNoEvents, "list", () => Promise.resolve(getDevices().map((d) => d.path)));
/**
 */
__publicField(_TransportNodeHidNoEvents, "listen", (observer) => {
  getDevices().forEach((device) => {
    const deviceModel = identifyUSBProductId(device.productId);
    observer.next({
      type: "add",
      descriptor: device.path,
      deviceModel,
      device
    });
  });
  observer.complete();
  return {
    unsubscribe: () => {
    }
  };
});
var TransportNodeHidNoEvents = _TransportNodeHidNoEvents;

// node_modules/.pnpm/@ledgerhq+hw-transport-node-hid@6.29.9/node_modules/@ledgerhq/hw-transport-node-hid/lib-es/listenDevices.js
var import_events2 = __toESM(require_events());
var import_usb = __toESM(require_dist());
var import_debounce = __toESM(require_debounce());
var listenDevices_default = (delay, listenDevicesPollingSkip2) => {
  const events = new import_events2.default();
  events.setMaxListeners(0);
  let listDevices = getDevices();
  const flatDevice = (d) => d.path;
  const getFlatDevices = () => [...new Set(getDevices().map((d) => flatDevice(d)))];
  const getDeviceByPaths = (paths) => listDevices.find((d) => paths.includes(flatDevice(d)));
  let lastDevices = getFlatDevices();
  const poll = () => {
    if (!listenDevicesPollingSkip2()) {
      log("hid-listen", "Polling for added or removed devices");
      let changeFound = false;
      const currentDevices = getFlatDevices();
      const newDevices = currentDevices.filter((d) => !lastDevices.includes(d));
      if (newDevices.length > 0) {
        log("hid-listen", "New device found:", newDevices);
        listDevices = getDevices();
        events.emit("add", getDeviceByPaths(newDevices));
        changeFound = true;
      } else {
        log("hid-listen", "No new device found");
      }
      const removeDevices = lastDevices.filter((d) => !currentDevices.includes(d));
      if (removeDevices.length > 0) {
        log("hid-listen", "Removed device found:", removeDevices);
        events.emit("remove", getDeviceByPaths(removeDevices));
        listDevices = listDevices.filter((d) => !removeDevices.includes(flatDevice(d)));
        changeFound = true;
      } else {
        log("hid-listen", "No removed device found");
      }
      if (changeFound) {
        lastDevices = currentDevices;
      }
    } else {
      log("hid-listen", "Polling skipped, re-debouncing");
      debouncedPoll();
    }
  };
  const debouncedPoll = (0, import_debounce.default)(poll, delay);
  const attachDetected = (device) => {
    log("hid-listen", "Device add detected:", device);
    debouncedPoll();
  };
  import_usb.usb.on("attach", attachDetected);
  log("hid-listen", "attach listener added");
  const detachDetected = (device) => {
    log("hid-listen", "Device removal detected:", device);
    debouncedPoll();
  };
  import_usb.usb.on("detach", detachDetected);
  log("hid-listen", "detach listener added");
  return {
    stop: () => {
      log("hid-listen", "Stop received, removing listeners and cancelling pending debounced polls");
      debouncedPoll.cancel();
      import_usb.usb.removeListener("attach", attachDetected);
      import_usb.usb.removeListener("detach", detachDetected);
    },
    events
  };
};

// node_modules/.pnpm/@ledgerhq+hw-transport-node-hid@6.29.9/node_modules/@ledgerhq/hw-transport-node-hid/lib-es/TransportNodeHid.js
var listenDevicesDebounce = 500;
var listenDevicesPollingSkip = () => false;
var _TransportNodeHid = class _TransportNodeHid extends TransportNodeHidNoEvents {
  /**
   * if path="" is not provided, the library will take the first device
   */
  static open(path) {
    return Promise.resolve().then(() => {
      if (path) {
        return new _TransportNodeHid(new import_node_hid2.default.HID(path));
      }
      const device = getDevices()[0];
      if (!device)
        throw new TransportError("NoDevice", "NoDevice");
      return new _TransportNodeHid(new import_node_hid2.default.HID(device.path));
    });
  }
};
/**
 *
 */
__publicField(_TransportNodeHid, "isSupported", TransportNodeHidNoEvents.isSupported);
/**
 *
 */
__publicField(_TransportNodeHid, "list", TransportNodeHidNoEvents.list);
/**
 *
 */
__publicField(_TransportNodeHid, "setListenDevicesDebounce", (delay) => {
  listenDevicesDebounce = delay;
});
/**
 *
 */
__publicField(_TransportNodeHid, "setListenDevicesPollingSkip", (conditionToSkip) => {
  listenDevicesPollingSkip = conditionToSkip;
});
/**
 *
 */
__publicField(_TransportNodeHid, "setListenDevicesDebug", () => {
  console.warn("setListenDevicesDebug is deprecated. Use @ledgerhq/logs instead. No logs will get emitted there anymore.");
});
/**
 */
__publicField(_TransportNodeHid, "listen", (observer) => {
  let unsubscribed = false;
  Promise.resolve(getDevices()).then((devices2) => {
    for (const device of devices2) {
      if (!unsubscribed) {
        const descriptor = device.path;
        const deviceModel = identifyUSBProductId(device.productId);
        observer.next({
          type: "add",
          descriptor,
          device,
          deviceModel
        });
      }
    }
  });
  const { events, stop } = listenDevices_default(listenDevicesDebounce, listenDevicesPollingSkip);
  const onAdd = (device) => {
    if (unsubscribed || !device)
      return;
    const deviceModel = identifyUSBProductId(device.productId);
    observer.next({
      type: "add",
      descriptor: device.path,
      deviceModel,
      device
    });
  };
  const onRemove = (device) => {
    if (unsubscribed || !device)
      return;
    const deviceModel = identifyUSBProductId(device.productId);
    observer.next({
      type: "remove",
      descriptor: device.path,
      deviceModel,
      device
    });
  };
  events.on("add", onAdd);
  events.on("remove", onRemove);
  function unsubscribe() {
    unsubscribed = true;
    events.removeListener("add", onAdd);
    events.removeListener("remove", onRemove);
    stop();
  }
  return {
    unsubscribe
  };
});
var TransportNodeHid = _TransportNodeHid;
export {
  TransportNodeHid as default
};
//# sourceMappingURL=@ledgerhq_hw-transport-node-hid.js.map
